import sqlite3
import os

def analyze_database():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = os.path.join(os.path.dirname(__file__), 'sushi_express.db')
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• SUSHI EXPRESS")
    print("=" * 60)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    
    print(f"üìä –ù–ê–ô–î–ï–ù–û –¢–ê–ë–õ–ò–¶: {len(tables)}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    for table_name, in tables:
        print(f"üóÇÔ∏è  –¢–ê–ë–õ–ò–¶–ê: {table_name.upper()}")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute(f"PRAGMA table_info({table_name});")
        columns = cursor.fetchall()
        
        print("üìã –ü–û–õ–Ø:")
        for col in columns:
            col_id, name, data_type, not_null, default_val, pk = col
            pk_mark = " üîë" if pk else ""
            not_null_mark = " ‚ö†Ô∏è" if not_null else ""
            default_mark = f" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_val})" if default_val else ""
            print(f"   ‚Ä¢ {name} ({data_type}){pk_mark}{not_null_mark}{default_mark}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute(f"SELECT COUNT(*) FROM {table_name};")
        count = cursor.fetchone()[0]
        print(f"üìà –ó–ê–ü–ò–°–ï–ô: {count}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute(f"PRAGMA index_list({table_name});")
        indexes = cursor.fetchall()
        if indexes:
            print("üîç –ò–ù–î–ï–ö–°–´:")
            for idx in indexes:
                print(f"   ‚Ä¢ {idx[1]}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
        cursor.execute(f"PRAGMA foreign_key_list({table_name});")
        foreign_keys = cursor.fetchall()
        if foreign_keys:
            print("üîó –í–ù–ï–®–ù–ò–ï –ö–õ–Æ–ß–ò:")
            for fk in foreign_keys:
                print(f"   ‚Ä¢ {fk[3]} ‚Üí {fk[2]}.{fk[4]}")
        
        print()
    
    # –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    print("üîó –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ï–ô –ú–ï–ñ–î–£ –¢–ê–ë–õ–ò–¶–ê–ú–ò")
    print("=" * 60)
    
    # –°–≤—è–∑–∏ –∏–∑ foreign keys
    relationships = {}
    for table_name, in tables:
        cursor.execute(f"PRAGMA foreign_key_list({table_name});")
        fks = cursor.fetchall()
        if fks:
            relationships[table_name] = []
            for fk in fks:
                relationships[table_name].append({
                    'from_column': fk[3],
                    'to_table': fk[2],
                    'to_column': fk[4]
                })
    
    for table, rels in relationships.items():
        print(f"üìä {table.upper()}:")
        for rel in rels:
            print(f"   {rel['from_column']} ‚Üí {rel['to_table']}.{rel['to_column']}")
        print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    for table_name, in tables:
        cursor.execute(f"SELECT COUNT(*) FROM {table_name};")
        count = cursor.fetchone()[0]
        
        if count > 0:
            print(f"üìà {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            if table_name in ['users', 'rolls', 'sets', 'ingredients', 'other_items']:
                cursor.execute(f"SELECT * FROM {table_name} LIMIT 3;")
                sample_data = cursor.fetchall()
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                cursor.execute(f"PRAGMA table_info({table_name});")
                columns_info = cursor.fetchall()
                column_names = [col[1] for col in columns_info]
                
                print("   –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
                for i, row in enumerate(sample_data, 1):
                    print(f"   {i}. ", end="")
                    for j, value in enumerate(row):
                        if j < len(column_names):
                            print(f"{column_names[j]}: {value}", end=", " if j < len(row)-1 else "")
                    print()
        else:
            print(f"üìà {table_name}: 0 –∑–∞–ø–∏—Å–µ–π")
        print()
    
    conn.close()
    
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    analyze_database()
