#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞
"""

import requests
import json
import time

def test_chef_dashboard():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ù–ï–õ–ò –®–ï–§-–ü–û–í–ê–†–ê")
    print("=" * 50)
    
    base_url = 'http://127.0.0.1:5000/api'
    
    try:
        print("üìù –¢–µ—Å—Ç 1: –í—Ö–æ–¥ —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞")
        login_data = {
            'email': 'chef@sushiroll.com',
            'password': 'chef123'
        }
        
        login_response = requests.post(f'{base_url}/login', json=login_data)
        if login_response.status_code == 200:
            token = login_response.json()['access_token']
            headers = {'Authorization': f'Bearer {token}'}
            user_info = login_response.json()['user']
            print(f"‚úÖ –®–µ—Ñ-–ø–æ–≤–∞—Ä –≤–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            print(f"   –ò–º—è: {user_info['name']}")
            print(f"   Email: {user_info['email']}")
            print(f"   –ê–¥–º–∏–Ω: {'–î–∞' if user_info['is_admin'] else '–ù–µ—Ç'}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞: {login_response.text}")
            return
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        return
    
    try:
        print("\nüìù –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤")
        response = requests.get(f'{base_url}/orders/all', headers=headers)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {data['total']}")
            
            if data['total'] > 0:
                print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤:")
                orders = data['orders'][:5]
                for order in orders:
                    print(f"  üÜî –ó–∞–∫–∞–∑ #{order['id']}")
                    print(f"     üë§ –û—Ç: {order.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω')} ({order.get('user_email', '–ù–µ —É–∫–∞–∑–∞–Ω')})")
                    print(f"     üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('user_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                    print(f"     üìç –ê–¥—Ä–µ—Å: {order.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                    print(f"     üí∞ –°—É–º–º–∞: {order['total_price']} —Å–æ–º")
                    print(f"     üìä –°—Ç–∞—Ç—É—Å: {order['status']}")
                    print(f"     üìÖ –î–∞—Ç–∞: {order['created_at']}")
                    if order.get('comment'):
                        print(f"     üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['comment']}")
                    print()
            else:
                print("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
    
    try:
        print("\nüìù –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        # –í—Ö–æ–¥–∏–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_login_data = {
            'email': 'oo@gmail.com',
            'password': '123456'
        }
        
        user_login_response = requests.post(f'{base_url}/login', json=user_login_data)
        if user_login_response.status_code == 200:
            user_token = user_login_response.json()['access_token']
            user_headers = {'Authorization': f'Bearer {user_token}'}
            print("‚úÖ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order_data = {
                'delivery_address': '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞',
                'phone': '+996700708003',
                'payment_method': 'cash',
                'comment': '–ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞',
                'items': [
                    {
                        'item_type': 'roll',
                        'item_id': 1,
                        'quantity': 2,
                        'name': '–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è',
                        'price': 370.0
                    }
                ]
            }
            
            order_response = requests.post(f'{base_url}/orders', 
                                         headers=user_headers, json=order_data)
            if order_response.status_code == 201:
                order_result = order_response.json()
                new_order_id = order_result['order']['id']
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: #{new_order_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à–µ—Ñ-–ø–æ–≤–∞—Ä –≤–∏–¥–∏—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
                print("\nüìù –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞")
                chef_response = requests.get(f'{base_url}/orders/all', headers=headers)
                if chef_response.status_code == 200:
                    chef_data = chef_response.json()
                    print(f"‚úÖ –®–µ—Ñ-–ø–æ–≤–∞—Ä –≤–∏–¥–∏—Ç {chef_data['total']} –∑–∞–∫–∞–∑–æ–≤")
                    
                    # –ò—â–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
                    new_order_found = False
                    for order in chef_data['orders']:
                        if order['id'] == new_order_id:
                            new_order_found = True
                            print(f"‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω —É —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞:")
                            print(f"   üÜî ID: {order['id']}")
                            print(f"   üë§ –û—Ç: {order.get('user_name')} ({order.get('user_email')})")
                            print(f"   üí∞ –°—É–º–º–∞: {order['total_price']} —Å–æ–º")
                            print(f"   üìä –°—Ç–∞—Ç—É—Å: {order['status']}")
                            print(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.get('comment', '–ù–µ—Ç')}")
                            break
                    
                    if not new_order_found:
                        print("‚ùå –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω —É —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        print("\nüîç –í—Å–µ –∑–∞–∫–∞–∑—ã —É —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞:")
                        for order in chef_data['orders'][:3]:
                            print(f"   –ó–∞–∫–∞–∑ #{order['id']}: {order['total_price']} —Å–æ–º, —Å—Ç–∞—Ç—É—Å: {order['status']}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —É —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞: {chef_response.text}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {order_response.text}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_login_response.text}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_chef_dashboard()

