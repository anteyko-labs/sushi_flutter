#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API endpoints —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤
"""

import os
import re

def update_api_endpoints():
    print("üîß –û–ë–ù–û–í–õ–ï–ù–ò–ï API ENDPOINTS –° –ü–†–û–í–ï–†–ö–û–ô –ù–ê–õ–ò–ß–ò–Ø")
    print("=" * 50)
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª app_sqlite.py
    with open('app_sqlite.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    print("üìù –û–±–Ω–æ–≤–ª—è–µ–º endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–ª–æ–≤...")
    
    # –ù–∞—Ö–æ–¥–∏–º endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–ª–æ–≤
    rolls_pattern = r"(@app\.route\('/api/rolls', methods=\['GET'\]\)\ndef get_rolls\(\):.*?)(return jsonify\(.*?\)\n)"
    
    def update_rolls_endpoint(match):
        original = match.group(1)
        return_part = match.group(2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è
        new_content = original + '''
    try:
        rolls = Roll.query.all()
        rolls_data = []
        
        for roll in rolls:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–æ–ª–ª–∞
            is_available, availability_message = check_roll_availability(roll.id)
            
            roll_data = {
                'id': roll.id,
                'name': roll.name,
                'description': roll.description,
                'sale_price': roll.sale_price,
                'image_url': roll.image_url,
                'category': roll.category,
                'is_available': is_available,
                'availability_message': availability_message if not is_available else None
            }
            rolls_data.append(roll_data)
        
        ''' + return_part.replace('rolls_data', 'rolls_data')
        
        return new_content
    
    # –û–±–Ω–æ–≤–ª—è–µ–º endpoint –¥–ª—è —Ä–æ–ª–ª–æ–≤
    new_content = re.sub(rolls_pattern, update_rolls_endpoint, content, flags=re.DOTALL)
    
    print("üìù –û–±–Ω–æ–≤–ª—è–µ–º endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–æ–≤...")
    
    # –ù–∞—Ö–æ–¥–∏–º endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–æ–≤
    sets_pattern = r"(@app\.route\('/api/sets', methods=\['GET'\]\)\ndef get_sets\(\):.*?)(return jsonify\(.*?\)\n)"
    
    def update_sets_endpoint(match):
        original = match.group(1)
        return_part = match.group(2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è
        new_content = original + '''
    try:
        sets = Set.query.all()
        sets_data = []
        
        for set_item in sets:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∞
            is_available, availability_message = check_set_availability(set_item.id)
            
            set_data = {
                'id': set_item.id,
                'name': set_item.name,
                'description': set_item.description,
                'set_price': set_item.set_price,
                'image_url': set_item.image_url,
                'is_available': is_available,
                'availability_message': availability_message if not is_available else None
            }
            sets_data.append(set_data)
        
        ''' + return_part.replace('sets_data', 'sets_data')
        
        return new_content
    
    # –û–±–Ω–æ–≤–ª—è–µ–º endpoint –¥–ª—è —Å–µ—Ç–æ–≤
    new_content = re.sub(sets_pattern, update_sets_endpoint, new_content, flags=re.DOTALL)
    
    print("üìù –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ endpoints –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è
    availability_endpoints = '''

# ===== ENDPOINTS –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ù–ê–õ–ò–ß–ò–Ø =====

@app.route('/api/rolls/<int:roll_id>/availability', methods=['GET'])
def check_roll_availability_endpoint(roll_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–ª–ª–∞"""
    try:
        is_available, message = check_roll_availability(roll_id)
        return jsonify({
            'roll_id': roll_id,
            'is_available': is_available,
            'message': message
        }), 200
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'}), 500

@app.route('/api/sets/<int:set_id>/availability', methods=['GET'])
def check_set_availability_endpoint(set_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ç–∞"""
    try:
        is_available, message = check_set_availability(set_id)
        return jsonify({
            'set_id': set_id,
            'is_available': is_available,
            'message': message
        }), 200
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'}), 500

@app.route('/api/ingredients/<int:ingredient_id>/availability', methods=['GET'])
def check_ingredient_availability_endpoint(ingredient_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞"""
    try:
        is_available, message = check_ingredient_availability(ingredient_id)
        return jsonify({
            'ingredient_id': ingredient_id,
            'is_available': is_available,
            'message': message
        }), 200
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'}), 500

'''
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö endpoints (–ø–µ—Ä–µ–¥ if __name__ == '__main__')
    insert_point = content.find("if __name__ == '__main__':")
    if insert_point == -1:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö endpoints")
        return
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ endpoints
    final_content = new_content[:insert_point] + availability_endpoints + new_content[insert_point:]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('app_sqlite.py', 'w', encoding='utf-8') as f:
        f.write(final_content)
    
    print("‚úÖ API endpoints –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    print("üìù –î–æ–±–∞–≤–ª–µ–Ω—ã:")
    print("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ /api/rolls")
    print("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ /api/sets")
    print("  - /api/rolls/<id>/availability")
    print("  - /api/sets/<id>/availability")
    print("  - /api/ingredients/<id>/availability")

if __name__ == "__main__":
    update_api_endpoints()

