#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
"""

import sqlite3
import hashlib
import secrets
import string

def generate_referral_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥"""
    return ''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(8))

def hash_password(password):
    """–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å"""
    return hashlib.sha256(password.encode()).hexdigest()

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('sushi_express.db')
    cursor = conn.cursor()
    
    try:
        print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                email TEXT UNIQUE NOT NULL,
                phone TEXT,
                password_hash TEXT NOT NULL,
                location TEXT,
                loyalty_points INTEGER DEFAULT 0,
                bonus_points INTEGER DEFAULT 0,
                referral_code TEXT UNIQUE,
                referred_by TEXT,
                is_active BOOLEAN DEFAULT 1,
                is_admin BOOLEAN DEFAULT 0,
                cart TEXT DEFAULT '[]',
                favorites TEXT DEFAULT '{}',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_login_at TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–æ–ª–ª–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS rolls (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                price REAL NOT NULL,
                image_url TEXT,
                ingredients TEXT,
                category TEXT,
                is_popular BOOLEAN DEFAULT 0,
                is_available BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Ç–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS sets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                price REAL NOT NULL,
                image_url TEXT,
                rolls_included TEXT,
                is_popular BOOLEAN DEFAULT 0,
                is_available BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                user_name TEXT NOT NULL,
                user_phone TEXT NOT NULL,
                user_email TEXT NOT NULL,
                delivery_address TEXT NOT NULL,
                delivery_latitude REAL NOT NULL,
                delivery_longitude REAL NOT NULL,
                total_amount REAL NOT NULL,
                status TEXT DEFAULT 'pending',
                notes TEXT,
                delivery_instructions TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS order_items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER NOT NULL,
                item_type TEXT NOT NULL,
                item_id INTEGER NOT NULL,
                item_name TEXT NOT NULL,
                item_image TEXT,
                quantity INTEGER NOT NULL,
                price REAL NOT NULL,
                total_price REAL NOT NULL,
                FOREIGN KEY (order_id) REFERENCES orders (id)
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS ingredients (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                current_stock REAL NOT NULL,
                unit TEXT NOT NULL,
                min_stock REAL DEFAULT 0,
                cost_per_unit REAL DEFAULT 0,
                supplier TEXT,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞
        print("üë®‚Äçüç≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞...")
        
        chef_password = "chef123"
        hashed_password = hash_password(chef_password)
        referral_code = generate_referral_code()
        
        cursor.execute("""
            INSERT OR IGNORE INTO users (
                name, email, phone, password_hash, 
                is_admin, is_active, referral_code,
                created_at, last_login_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
        """, (
            "–®–µ—Ñ-–ø–æ–≤–∞—Ä",
            "chef@sushiroll.com", 
            "996700123456",
            hashed_password,
            True,  # is_admin = True
            True,  # is_active = True
            referral_code
        ))
        
        chef_id = cursor.lastrowid
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω —Å ID: {chef_id}")
        print(f"üìß Email: chef@sushiroll.com")
        print(f"üîë –ü–∞—Ä–æ–ª—å: chef123")
        print(f"üé´ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referral_code}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        test_password = "test123"
        test_hashed_password = hash_password(test_password)
        test_referral_code = generate_referral_code()
        
        cursor.execute("""
            INSERT OR IGNORE INTO users (
                name, email, phone, password_hash, 
                is_admin, is_active, referral_code,
                created_at, last_login_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
        """, (
            "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "test@sushiroll.com", 
            "996700654321",
            test_hashed_password,
            False,  # is_admin = False
            True,   # is_active = True
            test_referral_code
        ))
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
        print(f"üìß Email: test@sushiroll.com")
        print(f"üîë –ü–∞—Ä–æ–ª—å: test123")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        print("ü•ò –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤...")
        
        ingredients = [
            ("–†–∏—Å –¥–ª—è —Å—É—à–∏", 15.0, "–∫–≥", 5.0, 150.0, "–ü–æ—Å—Ç–∞–≤—â–∏–∫ —Ä–∏—Å–∞"),
            ("–õ–æ—Å–æ—Å—å", 8.0, "–∫–≥", 2.0, 800.0, "–†—ã–±–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫"),
            ("–ê–≤–æ–∫–∞–¥–æ", 12.0, "—à—Ç", 5.0, 50.0, "–§—Ä—É–∫—Ç–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫"),
            ("–°—ã—Ä –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è", 6.0, "—É–ø–∞–∫–æ–≤–æ–∫", 2.0, 300.0, "–ú–æ–ª–æ—á–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫"),
            ("–ù–æ—Ä–∏", 50.0, "–ª–∏—Å—Ç–æ–≤", 10.0, 20.0, "–ú–æ—Ä—Å–∫–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫"),
            ("–í–∞—Å–∞–±–∏", 3.0, "—Ç—é–±–∏–∫–æ–≤", 1.0, 150.0, "–°–ø–µ—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫"),
            ("–ò–º–±–∏—Ä—å", 2.0, "–±–∞–Ω–æ–∫", 1.0, 100.0, "–ö–æ–Ω—Å–µ—Ä–≤—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫"),
        ]
        
        for name, stock, unit, min_stock, cost, supplier in ingredients:
            cursor.execute("""
                INSERT OR IGNORE INTO ingredients (
                    name, current_stock, unit, min_stock, cost_per_unit, supplier
                ) VALUES (?, ?, ?, ?, ?, ?)
            """, (name, stock, unit, min_stock, cost, supplier))
        
        print("‚úÖ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        for table in tables:
            print(f"   - {table[0]}")
        
        print("\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        cursor.execute("SELECT id, name, email, is_admin FROM users;")
        users = cursor.fetchall()
        for user in users:
            print(f"   - {user[1]} ({user[2]}) {'[–ê–î–ú–ò–ù]' if user[3] else ''}")
        
        print("\nü•ò –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:")
        cursor.execute("SELECT name, current_stock, unit FROM ingredients;")
        ingredients = cursor.fetchall()
        for ingredient in ingredients:
            print(f"   - {ingredient[0]}: {ingredient[1]} {ingredient[2]}")
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
    finally:
        conn.close()

if __name__ == "__main__":
    print("üç£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_database()

