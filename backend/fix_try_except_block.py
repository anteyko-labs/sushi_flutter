#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ try-except –≤ —Ñ—É–Ω–∫—Ü–∏–∏ check_ingredient_availability
"""

def fix_try_except_block():
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–õ–û–ö–ê TRY-EXCEPT")
    print("=" * 50)
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open('app_sqlite.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é check_ingredient_availability
    old_function = '''def check_ingredient_availability(ingredient_id, required_quantity=1):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ"""
    try:
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500
        ingredient = Ingredient.query.get(ingredient_id)
        if not ingredient:
            return False, "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if ingredient.stock_quantity is None or ingredient.stock_quantity <= 0:
            return False, f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç '{ingredient.name}' –∑–∞–∫–æ–Ω—á–∏–ª—Å—è"
        
        if ingredient.stock_quantity < required_quantity:
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ '{ingredient.name}'. –î–æ—Å—Ç—É–ø–Ω–æ: {ingredient.stock_quantity}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {required_quantity}"
        
        return True, "–í –Ω–∞–ª–∏—á–∏–∏"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è: {str(e)}"'''
    
    new_function = '''def check_ingredient_availability(ingredient_id, required_quantity=1):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ"""
    try:
        ingredient = Ingredient.query.get(ingredient_id)
        if not ingredient:
            return False, "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if ingredient.stock_quantity is None or ingredient.stock_quantity <= 0:
            return False, f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç '{ingredient.name}' –∑–∞–∫–æ–Ω—á–∏–ª—Å—è"
        
        if ingredient.stock_quantity < required_quantity:
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ '{ingredient.name}'. –î–æ—Å—Ç—É–ø–Ω–æ: {ingredient.stock_quantity}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {required_quantity}"
        
        return True, "–í –Ω–∞–ª–∏—á–∏–∏"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è: {str(e)}"'''
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–æ–≤—É—é
    if old_function in content:
        content = content.replace(old_function, new_function)
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è check_ingredient_availability –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    else:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É
        lines = content.split('\n')
        new_lines = []
        in_broken_function = False
        fixed = False
        
        for i, line in enumerate(lines):
            if 'def check_ingredient_availability' in line:
                in_broken_function = True
                new_lines.append(line)
                continue
            
            if in_broken_function:
                if line.strip() == 'try:':
                    new_lines.append('    try:')
                    new_lines.append('        ingredient = Ingredient.query.get(ingredient_id)')
                    new_lines.append('        if not ingredient:')
                    new_lines.append('            return False, "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"')
                    new_lines.append('        ')
                    new_lines.append('        if ingredient.stock_quantity is None or ingredient.stock_quantity <= 0:')
                    new_lines.append('            return False, f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç \'{ingredient.name}\' –∑–∞–∫–æ–Ω—á–∏–ª—Å—è"')
                    new_lines.append('        ')
                    new_lines.append('        if ingredient.stock_quantity < required_quantity:')
                    new_lines.append('            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ \'{ingredient.name}\'. –î–æ—Å—Ç—É–ø–Ω–æ: {ingredient.stock_quantity}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {required_quantity}"')
                    new_lines.append('        ')
                    new_lines.append('        return True, "–í –Ω–∞–ª–∏—á–∏–∏"')
                    new_lines.append('    except Exception as e:')
                    new_lines.append('        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è: {str(e)}"')
                    fixed = True
                    continue
                
                if line.strip().startswith('except') or line.strip().startswith('return jsonify') or 'ingredient = Ingredient.query.get' in line:
                    continue
                
                if line.strip() == '' and fixed:
                    in_broken_function = False
                    new_lines.append(line)
                    continue
            
            new_lines.append(line)
        
        content = '\n'.join(new_lines)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('app_sqlite.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ –ë–ª–æ–∫ try-except –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")

if __name__ == "__main__":
    fix_try_except_block()

