import sqlite3
import os

def create_recipe_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Ä–æ–ª–ª–æ–≤ –∏ —Å–µ—Ç–æ–≤"""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = 'sushi_express.db'
    if not os.path.exists(db_path):
        db_path = 'instance/sushi_express.db'
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        print("üîß –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤...")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Ä–æ–ª–ª–æ–≤ (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS roll_recipes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                roll_id INTEGER NOT NULL,
                ingredient_id INTEGER NOT NULL,
                quantity REAL NOT NULL,
                unit TEXT NOT NULL,
                FOREIGN KEY (roll_id) REFERENCES rolls (id) ON DELETE CASCADE,
                FOREIGN KEY (ingredient_id) REFERENCES ingredients (id) ON DELETE CASCADE,
                UNIQUE(roll_id, ingredient_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–∞–≤–æ–≤ —Å–µ—Ç–æ–≤ (—Ä–æ–ª–ª—ã + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS set_compositions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                set_id INTEGER NOT NULL,
                item_type TEXT NOT NULL, -- 'roll' –∏–ª–∏ 'other_item'
                item_id INTEGER NOT NULL,
                quantity INTEGER NOT NULL DEFAULT 1,
                FOREIGN KEY (set_id) REFERENCES sets (id) ON DELETE CASCADE
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ description –≤ —Ç–∞–±–ª–∏—Ü—É rolls –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        cursor.execute("PRAGMA table_info(rolls)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'description' not in columns:
            cursor.execute('ALTER TABLE rolls ADD COLUMN description TEXT')
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ description –≤ —Ç–∞–±–ª–∏—Ü—É rolls")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ description –≤ —Ç–∞–±–ª–∏—Ü—É sets –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        cursor.execute("PRAGMA table_info(sets)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'description' not in columns:
            cursor.execute('ALTER TABLE sets ADD COLUMN description TEXT')
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ description –≤ —Ç–∞–±–ª–∏—Ü—É sets")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ image_url –≤ —Ç–∞–±–ª–∏—Ü—É sets –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'image_url' not in columns:
            cursor.execute('ALTER TABLE sets ADD COLUMN image_url TEXT')
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ image_url –≤ —Ç–∞–±–ª–∏—Ü—É sets")
        
        conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        print("\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü:")
        
        cursor.execute("PRAGMA table_info(roll_recipes)")
        print("roll_recipes:", [col[1] for col in cursor.fetchall()])
        
        cursor.execute("PRAGMA table_info(set_compositions)")
        print("set_compositions:", [col[1] for col in cursor.fetchall()])
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
    finally:
        conn.close()

if __name__ == "__main__":
    create_recipe_tables()
