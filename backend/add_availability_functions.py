#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ API
"""

import os

def add_availability_functions():
    print("üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ü–†–û–í–ï–†–ö–ò –ù–ê–õ–ò–ß–ò–Ø")
    print("=" * 50)
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª app_sqlite.py
    app_file = 'app_sqlite.py'
    
    with open(app_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if 'def check_ingredient_availability' in content:
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        return
    
    print("üîß –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
    availability_functions = '''

# ===== –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –ù–ê–õ–ò–ß–ò–Ø –¢–û–í–ê–†–û–í =====

def check_ingredient_availability(ingredient_id, required_quantity=1):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ"""
    try:
        ingredient = Ingredient.query.get(ingredient_id)
        if not ingredient:
            return False, "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if ingredient.stock_quantity is None or ingredient.stock_quantity <= 0:
            return False, f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç '{ingredient.name}' –∑–∞–∫–æ–Ω—á–∏–ª—Å—è"
        
        if ingredient.stock_quantity < required_quantity:
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ '{ingredient.name}'. –î–æ—Å—Ç—É–ø–Ω–æ: {ingredient.stock_quantity}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {required_quantity}"
        
        return True, "–í –Ω–∞–ª–∏—á–∏–∏"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è: {str(e)}"

def check_roll_availability(roll_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–æ–ª–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
    try:
        roll = Roll.query.get(roll_id)
        if not roll:
            return False, "–†–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Ä–æ–ª–ª–∞
        roll_ingredients = RollIngredient.query.filter_by(roll_id=roll_id).all()
        
        unavailable_ingredients = []
        for roll_ingredient in roll_ingredients:
            available, message = check_ingredient_availability(
                roll_ingredient.ingredient_id, 
                roll_ingredient.quantity
            )
            if not available:
                ingredient = Ingredient.query.get(roll_ingredient.ingredient_id)
                unavailable_ingredients.append(f"{ingredient.name}: {message}")
        
        if unavailable_ingredients:
            return False, f"–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {', '.join(unavailable_ingredients)}"
        
        return True, "–í –Ω–∞–ª–∏—á–∏–∏"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–ª–∞: {str(e)}"

def check_set_availability(set_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —Ä–æ–ª–ª–æ–≤"""
    try:
        set_item = Set.query.get(set_id)
        if not set_item:
            return False, "–°–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–ª—ã –≤ —Å–µ—Ç–µ
        set_rolls = SetRoll.query.filter_by(set_id=set_id).all()
        
        unavailable_rolls = []
        for set_roll in set_rolls:
            available, message = check_roll_availability(set_roll.roll_id)
            if not available:
                roll = Roll.query.get(set_roll.roll_id)
                unavailable_rolls.append(f"{roll.name}: {message}")
        
        if unavailable_rolls:
            return False, f"–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {', '.join(unavailable_rolls)}"
        
        return True, "–í –Ω–∞–ª–∏—á–∏–∏"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∞: {str(e)}"

'''
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π)
    insert_point = content.find('CORS(app)')
    if insert_point == -1:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π")
        return
    
    # –ò—â–µ–º –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ —Å CORS(app)
    end_of_line = content.find('\n', insert_point)
    if end_of_line == -1:
        end_of_line = len(content)
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ CORS(app)
    new_content = content[:end_of_line] + availability_functions + content[end_of_line:]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(app_file, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ app_sqlite.py")
    print("üìù –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("  - check_ingredient_availability()")
    print("  - check_roll_availability()")
    print("  - check_set_availability()")

if __name__ == "__main__":
    add_availability_functions()

