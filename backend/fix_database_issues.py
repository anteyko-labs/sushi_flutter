#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""

import sqlite3
import os

def fix_database():
    db_path = 'sushi_express.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    print(f"‚úÖ –†–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–æ–π: {db_path}")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        print("\nüîç –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï")
        print("="*50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        cursor.execute('SELECT COUNT(*) FROM rolls')
        rolls_count = cursor.fetchone()[0]
        print(f"üç£ –†–æ–ª–ª–æ–≤: {rolls_count}")
        
        cursor.execute('SELECT COUNT(*) FROM sets')
        sets_count = cursor.fetchone()[0]
        print(f"üç± –°–µ—Ç–æ–≤: {sets_count}")
        
        cursor.execute('SELECT COUNT(*) FROM ingredients')
        ingredients_count = cursor.fetchone()[0]
        print(f"üßÑ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {ingredients_count}")
        
        cursor.execute('SELECT COUNT(*) FROM roll_ingredients')
        roll_recipes_count = cursor.fetchone()[0]
        print(f"üßÑ –†–µ—Ü–µ–ø—Ç—É—Ä —Ä–æ–ª–ª–æ–≤: {roll_recipes_count}")
        
        cursor.execute('SELECT COUNT(*) FROM set_rolls')
        set_compositions_count = cursor.fetchone()[0]
        print(f"ü•¢ –°–æ—Å—Ç–∞–≤–æ–≤ —Å–µ—Ç–æ–≤: {set_compositions_count}")
        
        # 1. –°–û–ó–î–ê–ï–ú –¢–ï–°–¢–û–í–´–ï –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´ –ï–°–õ–ò –ò–• –ù–ï–¢
        if ingredients_count == 0:
            print("\nüßÑ –°–û–ó–î–ê–ï–ú –ë–ê–ó–û–í–´–ï –ò–ù–ì–†–ï–î–ò–ï–ù–¢–´")
            print("="*50)
            
            test_ingredients = [
                ('–†–∏—Å', 50.0, '–≥—Ä', 1000, '–æ—Å–Ω–æ–≤–∞'),
                ('–ù–æ—Ä–∏', 5.0, '–ª–∏—Å—Ç', 100, '–≤–æ–¥–æ—Ä–æ—Å–ª–∏'),
                ('–õ–æ—Å–æ—Å—å', 800.0, '–≥—Ä', 500, '—Ä—ã–±–∞'),
                ('–û–≥—É—Ä–µ—Ü', 150.0, '–≥—Ä', 200, '–æ–≤–æ—â–∏'),
                ('–ê–≤–æ–∫–∞–¥–æ', 300.0, '—à—Ç', 50, '–æ–≤–æ—â–∏'),
                ('–°—ã—Ä —Ñ–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', 600.0, '–≥—Ä', 300, '–º–æ–ª–æ—á–Ω—ã–µ'),
                ('–ò–∫—Ä–∞ —Ç–æ–±–∏–∫–æ', 1500.0, '–≥—Ä', 100, '–∏–∫—Ä–∞'),
                ('–ö—É—Ä–∏—Ü–∞', 400.0, '–≥—Ä', 1000, '–º—è—Å–æ'),
                ('–£–≥–æ—Ä—å', 1200.0, '–≥—Ä', 200, '—Ä—ã–±–∞'),
                ('–ö—É–Ω–∂—É—Ç', 800.0, '–≥—Ä', 100, '—Å–µ–º–µ–Ω–∞')
            ]
            
            for name, cost, unit, stock, category in test_ingredients:
                cursor.execute('''
                    INSERT INTO ingredients (name, cost_per_unit, unit, stock_quantity, category)
                    VALUES (?, ?, ?, ?, ?)
                ''', (name, cost, unit, stock, category))
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: {name}")
            
            conn.commit()
            
        # 2. –°–û–ó–î–ê–ï–ú –†–ï–¶–ï–ü–¢–£–†–´ –î–õ–Ø –†–û–õ–õ–û–í –ë–ï–ó –ù–ò–•
        print("\nüßÑ –°–û–ó–î–ê–ï–ú –†–ï–¶–ï–ü–¢–£–†–´ –î–õ–Ø –†–û–õ–õ–û–í")
        print("="*50)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª–ª—ã –±–µ–∑ —Ä–µ—Ü–µ–ø—Ç—É—Ä
        cursor.execute('''
            SELECT r.id, r.name 
            FROM rolls r 
            LEFT JOIN roll_ingredients ri ON r.id = ri.roll_id 
            WHERE ri.roll_id IS NULL
            LIMIT 10
        ''')
        rolls_without_recipes = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –±–∞–∑–æ–≤—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        cursor.execute('SELECT id, name FROM ingredients LIMIT 5')
        available_ingredients = cursor.fetchall()
        
        if rolls_without_recipes and available_ingredients:
            for roll_id, roll_name in rolls_without_recipes:
                print(f"  üç£ –°–æ–∑–¥–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—É—Ä—É –¥–ª—è: {roll_name}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
                for i, (ing_id, ing_name) in enumerate(available_ingredients[:3]):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
                    amount = 100 + i * 50  # –†–∞–∑–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                    cursor.execute('''
                        INSERT INTO roll_ingredients (roll_id, ingredient_id, amount_per_roll)
                        VALUES (?, ?, ?)
                    ''', (roll_id, ing_id, amount))
                    print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω {ing_name}: {amount}–≥—Ä")
            
            conn.commit()
        
        # 3. –°–û–ó–î–ê–ï–ú –°–û–°–¢–ê–í–´ –î–õ–Ø –°–ï–¢–û–í –ë–ï–ó –ù–ò–•
        print("\nü•¢ –°–û–ó–î–ê–ï–ú –°–û–°–¢–ê–í–´ –î–õ–Ø –°–ï–¢–û–í")
        print("="*50)
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ç—ã –±–µ–∑ —Å–æ—Å—Ç–∞–≤–∞
        cursor.execute('''
            SELECT s.id, s.name 
            FROM sets s 
            LEFT JOIN set_rolls sr ON s.id = sr.set_id 
            WHERE sr.set_id IS NULL
            LIMIT 10
        ''')
        sets_without_composition = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–ª–ª–æ–≤
        cursor.execute('SELECT id, name FROM rolls LIMIT 3')
        available_rolls = cursor.fetchall()
        
        if sets_without_composition and available_rolls:
            for set_id, set_name in sets_without_composition:
                print(f"  üç± –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–∞–≤ –¥–ª—è: {set_name}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º 2-3 —Ä–æ–ª–ª–∞ –≤ –∫–∞–∂–¥—ã–π —Å–µ—Ç
                for i, (roll_id, roll_name) in enumerate(available_rolls[:2]):
                    quantity = 2 + i  # 2 –∏–ª–∏ 3 —à—Ç—É–∫–∏
                    cursor.execute('''
                        INSERT INTO set_rolls (set_id, roll_id, quantity)
                        VALUES (?, ?, ?)
                    ''', (set_id, roll_id, quantity))
                    print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω {roll_name}: {quantity} —à—Ç")
            
            conn.commit()
        
        # 4. –û–ë–ù–û–í–õ–Ø–ï–ú –¶–ï–ù–´ –†–û–õ–õ–û–í –ù–ê –û–°–ù–û–í–ï –†–ï–¶–ï–ü–¢–£–†
        print("\nüí∞ –û–ë–ù–û–í–õ–Ø–ï–ú –¶–ï–ù–´ –†–û–õ–õ–û–í")
        print("="*50)
        
        cursor.execute('''
            SELECT r.id, r.name,
                   SUM(ri.amount_per_roll * i.cost_per_unit / 1000) as calculated_cost
            FROM rolls r
            JOIN roll_ingredients ri ON r.id = ri.roll_id
            JOIN ingredients i ON ri.ingredient_id = i.id
            GROUP BY r.id, r.name
        ''')
        
        roll_costs = cursor.fetchall()
        for roll_id, roll_name, calculated_cost in roll_costs:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
            cursor.execute('''
                UPDATE rolls 
                SET cost_price = ? 
                WHERE id = ?
            ''', (round(calculated_cost, 2), roll_id))
            print(f"  üí∞ {roll_name}: —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å {calculated_cost:.2f}‚ÇΩ")
        
        conn.commit()
        
        # 5. –û–ë–ù–û–í–õ–Ø–ï–ú –¶–ï–ù–´ –°–ï–¢–û–í –ù–ê –û–°–ù–û–í–ï –°–û–°–¢–ê–í–ê
        print("\nüí∞ –û–ë–ù–û–í–õ–Ø–ï–ú –¶–ï–ù–´ –°–ï–¢–û–í")
        print("="*50)
        
        cursor.execute('''
            SELECT s.id, s.name,
                   SUM(sr.quantity * r.cost_price) as calculated_cost,
                   SUM(sr.quantity * r.sale_price) as total_sale_price
            FROM sets s
            JOIN set_rolls sr ON s.id = sr.set_id
            JOIN rolls r ON sr.roll_id = r.id
            GROUP BY s.id, s.name
        ''')
        
        set_costs = cursor.fetchall()
        for set_id, set_name, calculated_cost, total_sale_price in set_costs:
            # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å = —Å—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–µ–π —Ä–æ–ª–ª–æ–≤
            # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ = –æ–±—â–∞—è —Ü–µ–Ω–∞ —Ä–æ–ª–ª–æ–≤ - —Å–∫–∏–¥–∫–∞ 10%
            sale_price = total_sale_price * 0.9  # 10% —Å–∫–∏–¥–∫–∞
            discount = ((total_sale_price - sale_price) / total_sale_price) * 100
            
            cursor.execute('''
                UPDATE sets 
                SET cost_price = ?, set_price = ?, discount_percent = ?
                WHERE id = ?
            ''', (round(calculated_cost, 2), round(sale_price, 2), round(discount, 1), set_id))
            print(f"  üí∞ {set_name}: —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å {calculated_cost:.2f}‚ÇΩ, –ø—Ä–æ–¥–∞–∂–∞ {sale_price:.2f}‚ÇΩ (—Å–∫–∏–¥–∫–∞ {discount:.1f}%)")
        
        conn.commit()
        
        print("\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´!")
        print("="*50)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute('SELECT COUNT(*) FROM roll_ingredients')
        print(f"üßÑ –†–µ—Ü–µ–ø—Ç—É—Ä —Ä–æ–ª–ª–æ–≤: {cursor.fetchone()[0]}")
        
        cursor.execute('SELECT COUNT(*) FROM set_rolls')
        print(f"ü•¢ –°–æ—Å—Ç–∞–≤–æ–≤ —Å–µ—Ç–æ–≤: {cursor.fetchone()[0]}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
    finally:
        conn.close()

if __name__ == "__main__":
    fix_database()
