#!/usr/bin/env python3
# -*- coding: utf-8 -*-

def add_missing_endpoints():
    print("üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –≠–ù–î–ü–û–ò–ù–¢–û–í")
    print("=" * 50)
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    with open('app_sqlite.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø–µ—Ä–µ–¥ if __name__ == '__main__':
    missing_endpoints = '''
# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ =====

@app.route('/api/rolls/<int:roll_id>', methods=['GET'])
def get_roll_details(roll_id):
    try:
        roll = Roll.query.get(roll_id)
        if not roll:
            return jsonify({'error': '–†–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        roll_data = {
            'id': roll.id,
            'name': roll.name,
            'description': roll.description,
            'price': roll.sale_price,
            'sale_price': roll.sale_price,
            'image_url': roll.image_url,
            'category': 'roll',
            'is_available': True,
            'ingredients': [ing.to_dict() for ing in roll.ingredients]
        }
        
        return jsonify({
            'success': True,
            'roll': roll_data
        }), 200
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–ª–∞: {str(e)}'}), 500

@app.route('/api/sets/<int:set_id>', methods=['GET'])
def get_set_details(set_id):
    try:
        set_item = Set.query.get(set_id)
        if not set_item:
            return jsonify({'error': '–°–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        set_data = {
            'id': set_item.id,
            'name': set_item.name,
            'description': set_item.description,
            'price': set_item.set_price,
            'set_price': set_item.set_price,
            'image_url': set_item.image_url,
            'is_available': True,
            'rolls': [sr.to_dict() for sr in set_item.rolls]
        }
        
        return jsonify({
            'success': True,
            'set': set_data
        }), 200
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–∞: {str(e)}'}), 500

# ===== –ê–î–ú–ò–ù –≠–ù–î–ü–û–ò–ù–¢–´ =====

@app.route('/api/admin/ingredients', methods=['GET'])
@jwt_required()
def get_admin_ingredients():
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user or not user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        ingredients = Ingredient.query.all()
        
        return jsonify({
            'success': True,
            'ingredients': [ing.to_dict() for ing in ingredients],
            'total': len(ingredients)
        }), 200
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {str(e)}'}), 500

@app.route('/api/admin/users', methods=['GET'])
@jwt_required()
def get_admin_users():
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user or not user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        users = User.query.all()
        
        return jsonify({
            'success': True,
            'users': [user.to_dict() for user in users],
            'total': len(users)
        }), 200
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}'}), 500

@app.route('/api/admin/stats', methods=['GET'])
@jwt_required()
def get_admin_stats():
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user or not user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = User.query.count()
        total_orders = Order.query.count()
        total_rolls = Roll.query.count()
        total_sets = Set.query.count()
        total_ingredients = Ingredient.query.count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º
        orders_by_status = {}
        for order in Order.query.all():
            status = order.status
            orders_by_status[status] = orders_by_status.get(status, 0) + 1
        
        return jsonify({
            'success': True,
            'stats': {
                'total_users': total_users,
                'total_orders': total_orders,
                'total_rolls': total_rolls,
                'total_sets': total_sets,
                'total_ingredients': total_ingredients,
                'orders_by_status': orders_by_status
            }
        }), 200
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}'}), 500

@app.route('/api/admin/rolls/<int:roll_id>/recipe', methods=['GET'])
@jwt_required()
def get_roll_recipe(roll_id):
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user or not user.is_admin:
            return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        roll = Roll.query.get(roll_id)
        if not roll:
            return jsonify({'error': '–†–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        recipe_data = {
            'roll_id': roll.id,
            'roll_name': roll.name,
            'ingredients': [ing.to_dict() for ing in roll.ingredients]
        }
        
        return jsonify({
            'success': True,
            'recipe': recipe_data
        }), 200
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç—É—Ä—ã: {str(e)}'}), 500

@app.route('/api/other-items', methods=['GET'])
def get_other_items():
    try:
        other_items = OtherItem.query.all()
        
        return jsonify({
            'success': True,
            'other_items': [item.to_dict() for item in other_items],
            'total': len(other_items)
        }), 200
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}'}), 500

'''
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–µ–¥ if __name__ == '__main__':)
    insert_position = content.find("if __name__ == '__main__':")
    
    if insert_position == -1:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
        return
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    new_content = content[:insert_position] + missing_endpoints + content[insert_position:]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('app_sqlite.py', 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print("‚úÖ –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã:")
    print("   - GET /api/rolls/<id> - –¥–µ—Ç–∞–ª–∏ —Ä–æ–ª–ª–∞")
    print("   - GET /api/sets/<id> - –¥–µ—Ç–∞–ª–∏ —Å–µ—Ç–∞")
    print("   - GET /api/admin/ingredients - –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∞")
    print("   - GET /api/admin/users - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞")
    print("   - GET /api/admin/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞")
    print("   - GET /api/admin/rolls/<id>/recipe - —Ä–µ—Ü–µ–ø—Ç—É—Ä–∞ —Ä–æ–ª–ª–∞")
    print("   - GET /api/other-items - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")

if __name__ == "__main__":
    add_missing_endpoints()
