import pandas as pd
import os
from models import db, User, Ingredient, Roll, RollIngredient, Set, SetRoll
from werkzeug.security import generate_password_hash
from datetime import datetime
from flask import Flask

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
app = Flask(__name__)
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
import os
db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'sushi_express.db')
app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db.init_app(app)

def load_real_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤ sushiback"""
    
    with app.app_context():
        print("üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...")
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        SetRoll.query.delete()
        RollIngredient.query.delete()
        Set.query.delete()
        Roll.query.delete()
        Ingredient.query.delete()
        User.query.delete()
        
        db.session.commit()
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = [
            User(
                name='–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                email='test@test.com',
                phone='+7 (999) 123-45-67',
                location='–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1',
                password_hash=generate_password_hash('123456'),
                loyalty_points=100
            ),
            User(
                name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                email='admin@sushi.com',
                phone='+7 (999) 999-99-99',
                location='–ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–±–∞—Ç, 10',
                password_hash=generate_password_hash('admin123'),
                loyalty_points=500
            )
        ]
        
        for user in users:
            db.session.add(user)
        
        db.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        print("ü•¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ Excel...")
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        ingredients_file = '../sushiback/ingredients.xlsx'
        
        if os.path.exists(ingredients_file):
            df = pd.read_excel(ingredients_file)
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(df)} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ Excel")
            
            for _, row in df.iterrows():
                ingredient = Ingredient(
                    name=row['name'],
                    cost_per_unit=row['price_per_unit'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º price_per_unit –∫–∞–∫ cost_per_unit
                    price_per_unit=row['price_per_unit'] * 1.2,  # –î–æ–±–∞–≤–ª—è–µ–º 20% –Ω–∞—Ü–µ–Ω–∫–∏
                    stock_quantity=row['quantity'],
                    unit=row['unit']
                )
                db.session.add(ingredient)
            
            db.session.commit()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤")
        else:
            print("‚ùå –§–∞–π–ª ingredients.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã...")
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            basic_ingredients = [
                Ingredient(name='–†–∏—Å', cost_per_unit=80, price_per_unit=100, stock_quantity=50, unit='–∫–≥'),
                Ingredient(name='–õ–æ—Å–æ—Å—å', cost_per_unit=600, price_per_unit=800, stock_quantity=20, unit='–∫–≥'),
                Ingredient(name='–°—ã—Ä —Å–ª–∏–≤–æ—á–Ω—ã–π', cost_per_unit=400, price_per_unit=500, stock_quantity=15, unit='–∫–≥'),
            ]
            for ing in basic_ingredients:
                db.session.add(ing)
            db.session.commit()
            print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã")
        
        print("üç£ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–ª—ã –∏–∑ Excel...")
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–æ–ª–ª–æ–≤
        rolls_file = '../sushiback/rolls.xlsx'
        
        if os.path.exists(rolls_file):
            df = pd.read_excel(rolls_file)
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(df)} —Ä–æ–ª–ª–æ–≤ –≤ Excel")
            
            for _, row in df.iterrows():
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø—Ä–∏–º–µ—Ä–Ω–æ 30% –æ—Ç —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏)
                sale_price = row['sale_price'] if pd.notna(row['sale_price']) else 300
                cost_price = sale_price * 0.3
                
                roll = Roll(
                    name=row['name'],
                    description=f"–†–æ–ª–ª {row['name']}",
                    cost_price=cost_price,
                    sale_price=sale_price,
                    is_popular=True if '—Ñ–∏–ª–∞' in row['name'].lower() else False,
                    is_new=False
                )
                db.session.add(roll)
            
            db.session.commit()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Ä–æ–ª–ª–æ–≤")
        else:
            print("‚ùå –§–∞–π–ª rolls.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–ª—ã...")
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–ª—ã
            basic_rolls = [
                Roll(name='–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', description='–õ–æ—Å–æ—Å—å, —Å—ã—Ä, –æ–≥—É—Ä–µ—Ü', cost_price=45, sale_price=350, is_popular=True),
                Roll(name='–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è', description='–ö—Ä–∞–±, –æ–≥—É—Ä–µ—Ü, –∏–∫—Ä–∞', cost_price=38, sale_price=280, is_popular=True),
            ]
            for roll in basic_rolls:
                db.session.add(roll)
            db.session.commit()
            print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–ª—ã")
        
        print("üîó –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–∞–≤ —Ä–æ–ª–ª–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–≤—è–∑–∏ —Ä–æ–ª–ª-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
        rolls = Roll.query.all()
        ingredients = Ingredient.query.all()
        
        if rolls and ingredients:
            for roll in rolls:
                # –ö–∞–∂–¥—ã–π —Ä–æ–ª–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∏—Å –∏ –Ω–æ—Ä–∏
                rice = next((ing for ing in ingredients if '—Ä–∏—Å' in ing.name.lower()), None)
                nori = next((ing for ing in ingredients if '–Ω–æ—Ä–∏' in ing.name.lower()), None)
                
                if rice:
                    ri = RollIngredient(roll_id=roll.id, ingredient_id=rice.id, amount_per_roll=0.1)
                    db.session.add(ri)
                
                if nori:
                    ri = RollIngredient(roll_id=roll.id, ingredient_id=nori.id, amount_per_roll=1)
                    db.session.add(ri)
            
            db.session.commit()
            print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å–≤—è–∑–∏ —Ä–æ–ª–ª-–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç")
        
        print("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ç—ã –∏–∑ Excel...")
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ç–æ–≤
        sets_file = '../sushiback/sets.xlsx'
        
        if os.path.exists(sets_file):
            df = pd.read_excel(sets_file)
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(df)} —Å–µ—Ç–æ–≤ –≤ Excel")
            
            for _, row in df.iterrows():
                set_item = Set(
                    name=row['name'],
                    description=f"–°–µ—Ç {row['name']}",
                    cost_price=row['cost_price'] if pd.notna(row['cost_price']) else 200,
                    set_price=row['set_price'] if pd.notna(row['set_price']) else 600,
                    discount_percent=row['discount_percent'] if pd.notna(row['discount_percent']) else 15,
                    is_popular=True if '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π' in row['name'].lower() else False,
                    is_new=False
                )
                db.session.add(set_item)
            
            db.session.commit()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–µ—Ç–æ–≤")
        else:
            print("‚ùå –§–∞–π–ª sets.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ—Ç—ã...")
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ—Ç—ã
            basic_sets = [
                Set(name='–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', description='–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–æ–ª–ª—ã', cost_price=150, set_price=580, discount_percent=15, is_popular=True),
                Set(name='–ë—é–¥–∂–µ—Ç–Ω—ã–π', description='–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–ª—ã', cost_price=120, set_price=450, discount_percent=20, is_new=True),
            ]
            for set_item in basic_sets:
                db.session.add(set_item)
            db.session.commit()
            print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Å–µ—Ç—ã")
        
        print("üîó –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–∞–≤ —Å–µ—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–≤—è–∑–∏ —Å–µ—Ç-—Ä–æ–ª–ª
        sets = Set.query.all()
        rolls = Roll.query.all()
        
        if sets and rolls:
            for set_item in sets:
                # –ö–∞–∂–¥—ã–π —Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç 2-3 —Ä–æ–ª–ª–∞
                for i, roll in enumerate(rolls[:3]):
                    if i < 3:  # –ú–∞–∫—Å–∏–º—É–º 3 —Ä–æ–ª–ª–∞ –≤ —Å–µ—Ç–µ
                        sr = SetRoll(set_id=set_item.id, roll_id=roll.id, quantity=1)
                        db.session.add(sr)
            
            db.session.commit()
            print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å–≤—è–∑–∏ —Å–µ—Ç-—Ä–æ–ª–ª")
        
        print("üéâ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {User.query.count()}")
        print(f"   ü•¨ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {Ingredient.query.count()}")
        print(f"   üç£ –†–æ–ª–ª—ã: {Roll.query.count()}")
        print(f"   üì¶ –°–µ—Ç—ã: {Set.query.count()}")
        print(f"   üîó –°–æ—Å—Ç–∞–≤ —Ä–æ–ª–ª–æ–≤: {RollIngredient.query.count()}")
        print(f"   üîó –°–æ—Å—Ç–∞–≤ —Å–µ—Ç–æ–≤: {SetRoll.query.count()}")

if __name__ == '__main__':
    load_real_data()
