#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

import sqlite3
import os

def check_database():
    db_path = 'backend/instance/sushi_express.db'
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
        
    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        print("\n" + "="*50)
        print("üìã –¢–ê–ë–õ–ò–¶–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
        print("="*50)
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        for table in tables:
            print(f"üìÅ {table[0]}")
        
        print("\n" + "="*50)
        print("üç£ –†–û–õ–õ–´ (–ø–µ—Ä–≤—ã–µ 5)")
        print("="*50)
        cursor.execute('SELECT id, name, description, cost_price, sale_price FROM rolls LIMIT 5')
        rolls = cursor.fetchall()
        for roll in rolls:
            print(f"üç£ ID: {roll[0]}, Name: {roll[1]}, Desc: {roll[2]}, Cost: {roll[3]}‚ÇΩ, Sale: {roll[4]}‚ÇΩ")
        
        print("\n" + "="*50)
        print("üç± –°–ï–¢–´ (–ø–µ—Ä–≤—ã–µ 5)")
        print("="*50)
        cursor.execute('SELECT id, name, description, cost_price, sale_price, discount_percent FROM sets LIMIT 5')
        sets = cursor.fetchall()
        for set_item in sets:
            print(f"üç± ID: {set_item[0]}, Name: {set_item[1]}, Desc: {set_item[2]}, Cost: {set_item[3]}‚ÇΩ, Sale: {set_item[4]}‚ÇΩ, Discount: {set_item[5]}%")
        
        print("\n" + "="*50)
        print("ü•¢ –°–û–°–¢–ê–í –°–ï–¢–û–í (–ø–µ—Ä–≤—ã–µ 10)")
        print("="*50)
        cursor.execute('SELECT sr.set_id, s.name as set_name, sr.roll_id, r.name as roll_name, sr.quantity FROM set_rolls sr LEFT JOIN sets s ON sr.set_id = s.id LEFT JOIN rolls r ON sr.roll_id = r.id LIMIT 10')
        set_compositions = cursor.fetchall()
        for comp in set_compositions:
            print(f"ü•¢ Set: {comp[1]} (ID: {comp[0]}) -> Roll: {comp[3]} (ID: {comp[2]}) x{comp[4]}")
        
        print("\n" + "="*50)
        print("üßÑ –†–ï–¶–ï–ü–¢–£–†–´ –†–û–õ–õ–û–í (–ø–µ—Ä–≤—ã–µ 10)")
        print("="*50)
        cursor.execute('SELECT ri.roll_id, r.name as roll_name, ri.ingredient_id, i.name as ingredient_name, ri.amount_per_roll FROM roll_ingredients ri LEFT JOIN rolls r ON ri.roll_id = r.id LEFT JOIN ingredients i ON ri.ingredient_id = i.id LIMIT 10')
        roll_recipes = cursor.fetchall()
        for recipe in roll_recipes:
            print(f"üßÑ Roll: {recipe[1]} (ID: {recipe[0]}) -> Ingredient: {recipe[3]} (ID: {recipe[2]}) x{recipe[4]}")
        
        print("\n" + "="*50)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("="*50)
        cursor.execute('SELECT COUNT(*) FROM rolls')
        rolls_count = cursor.fetchone()[0]
        print(f"üç£ –í—Å–µ–≥–æ —Ä–æ–ª–ª–æ–≤: {rolls_count}")
        
        cursor.execute('SELECT COUNT(*) FROM sets')
        sets_count = cursor.fetchone()[0]
        print(f"üç± –í—Å–µ–≥–æ —Å–µ—Ç–æ–≤: {sets_count}")
        
        cursor.execute('SELECT COUNT(*) FROM ingredients')
        ingredients_count = cursor.fetchone()[0]
        print(f"üßÑ –í—Å–µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {ingredients_count}")
        
        cursor.execute('SELECT COUNT(*) FROM set_rolls')
        set_compositions_count = cursor.fetchone()[0]
        print(f"ü•¢ –ó–∞–ø–∏—Å–µ–π —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ç–æ–≤: {set_compositions_count}")
        
        cursor.execute('SELECT COUNT(*) FROM roll_ingredients')
        roll_recipes_count = cursor.fetchone()[0]
        print(f"üßÑ –ó–∞–ø–∏—Å–µ–π —Ä–µ—Ü–µ–ø—Ç—É—Ä —Ä–æ–ª–ª–æ–≤: {roll_recipes_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–æ–ª–ª–æ–≤ —Ä–µ—Ü–µ–ø—Ç—É—Ä—ã
        print("\n" + "="*50)
        print("üîç –†–û–õ–õ–´ –ë–ï–ó –†–ï–¶–ï–ü–¢–£–†")
        print("="*50)
        cursor.execute('SELECT r.id, r.name FROM rolls r LEFT JOIN roll_ingredients ri ON r.id = ri.roll_id WHERE ri.roll_id IS NULL')
        rolls_without_recipes = cursor.fetchall()
        if rolls_without_recipes:
            print("‚ùå –†–æ–ª–ª—ã –±–µ–∑ —Ä–µ—Ü–µ–ø—Ç—É—Ä:")
            for roll in rolls_without_recipes:
                print(f"   üç£ ID: {roll[0]}, Name: {roll[1]}")
        else:
            print("‚úÖ –£ –≤—Å–µ—Ö —Ä–æ–ª–ª–æ–≤ –µ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç—É—Ä—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–µ—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤
        print("\n" + "="*50)
        print("üîç –°–ï–¢–´ –ë–ï–ó –°–û–°–¢–ê–í–ê")
        print("="*50)
        cursor.execute('SELECT s.id, s.name FROM sets s LEFT JOIN set_rolls sr ON s.id = sr.set_id WHERE sr.set_id IS NULL')
        sets_without_composition = cursor.fetchall()
        if sets_without_composition:
            print("‚ùå –°–µ—Ç—ã –±–µ–∑ —Å–æ—Å—Ç–∞–≤–∞:")
            for set_item in sets_without_composition:
                print(f"   üç± ID: {set_item[0]}, Name: {set_item[1]}")
        else:
            print("‚úÖ –£ –≤—Å–µ—Ö —Å–µ—Ç–æ–≤ –µ—Å—Ç—å —Å–æ—Å—Ç–∞–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    check_database()
