#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
"""

import os
import re

def add_cart_availability_check():
    print("üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–û–í–ï–†–ö–ò –ù–ê–õ–ò–ß–ò–Ø –í –ö–û–†–ó–ò–ù–£")
    print("=" * 50)
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª app_sqlite.py
    with open('app_sqlite.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    print("üìù –û–±–Ω–æ–≤–ª—è–µ–º endpoint –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É...")
    
    # –ù–∞—Ö–æ–¥–∏–º endpoint –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart_add_pattern = r"(@app\.route\('/api/cart/add', methods=\['POST'\]\)\n@jwt_required\(\)\ndef add_to_cart\(\):.*?)(return jsonify\(.*?\)\n)"
    
    def update_cart_add_endpoint(match):
        original = match.group(1)
        return_part = match.group(2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        new_content = original + '''
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        data = request.get_json()
        item_type = data.get('item_type')
        item_id = data.get('item_id')
        quantity = data.get('quantity', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        if item_type == 'roll':
            is_available, availability_message = check_roll_availability(item_id)
            if not is_available:
                return jsonify({
                    'error': f'–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {availability_message}'
                }), 400
        
        elif item_type == 'set':
            is_available, availability_message = check_set_availability(item_id)
            if not is_available:
                return jsonify({
                    'error': f'–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {availability_message}'
                }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É
        cart = json.loads(user.cart) if user.cart else []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        existing_item_index = None
        for i, cart_item in enumerate(cart):
            if cart_item['item_type'] == item_type and cart_item['item_id'] == item_id:
                existing_item_index = i
                break
        
        if existing_item_index is not None:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
            cart[existing_item_index]['quantity'] += quantity
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
            cart_item = {
                'item_type': item_type,
                'item_id': item_id,
                'quantity': quantity
            }
            cart.append(cart_item)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
        user.cart = json.dumps(cart)
        db.session.commit()
        
        ''' + return_part.replace("'success': True", "'success': True, 'message': '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É'")
        
        return new_content
    
    # –û–±–Ω–æ–≤–ª—è–µ–º endpoint –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    new_content = re.sub(cart_add_pattern, update_cart_add_endpoint, content, flags=re.DOTALL)
    
    print("üìù –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
    cart_check_endpoint = '''

@app.route('/api/cart/check-availability', methods=['GET'])
@jwt_required()
def check_cart_availability():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        user_id = get_jwt_identity()
        user = User.query.get(user_id)
        
        if not user:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        cart = json.loads(user.cart) if user.cart else []
        unavailable_items = []
        
        for cart_item in cart:
            item_type = cart_item['item_type']
            item_id = cart_item['item_id']
            
            if item_type == 'roll':
                is_available, message = check_roll_availability(item_id)
                if not is_available:
                    roll = Roll.query.get(item_id)
                    unavailable_items.append({
                        'type': 'roll',
                        'id': item_id,
                        'name': roll.name if roll else f'–†–æ–ª–ª #{item_id}',
                        'message': message
                    })
            
            elif item_type == 'set':
                is_available, message = check_set_availability(item_id)
                if not is_available:
                    set_item = Set.query.get(item_id)
                    unavailable_items.append({
                        'type': 'set',
                        'id': item_id,
                        'name': set_item.name if set_item else f'–°–µ—Ç #{item_id}',
                        'message': message
                    })
        
        return jsonify({
            'has_unavailable_items': len(unavailable_items) > 0,
            'unavailable_items': unavailable_items,
            'message': '–í –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã' if unavailable_items else '–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã'
        }), 200
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {str(e)}'}), 500

'''
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–µ–¥ if __name__ == '__main__')
    insert_point = new_content.find("if __name__ == '__main__':")
    if insert_point == -1:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
        return
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π endpoint
    final_content = new_content[:insert_point] + cart_check_endpoint + new_content[insert_point:]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('app_sqlite.py', 'w', encoding='utf-8') as f:
        f.write(final_content)
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    print("üìù –î–æ–±–∞–≤–ª–µ–Ω—ã:")
    print("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")
    print("  - /api/cart/check-availability - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π –∫–æ—Ä–∑–∏–Ω—ã")

if __name__ == "__main__":
    add_cart_availability_check()

