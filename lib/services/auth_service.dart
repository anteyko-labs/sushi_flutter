import 'dart:convert';
import 'dart:math';
import 'package:crypto/crypto.dart';
import '../models/user.dart';
import 'api_user_service.dart';
import 'api_service.dart';
import 'order_service.dart';

class AuthResult {
  final bool success;
  final String message;
  final User? user;
  final String? sessionToken;

  AuthResult({
    required this.success,
    required this.message,
    this.user,
    this.sessionToken,
  });
}

class AuthService {
  static final AuthService _instance = AuthService._internal();
  factory AuthService() => _instance;
  AuthService._internal();

  final ApiUserService _userService = ApiUserService();
  User? _currentUser;
  String? _currentSessionToken;

  User? get currentUser => _currentUser;
  bool get isLoggedIn => _currentUser != null;
  String? get sessionToken => _currentSessionToken;
  String? getToken() => _currentSessionToken;

  Future<void> initialize() async {
    print('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AuthService...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ API
    final apiHealth = await _userService.checkApiHealth();
    if (apiHealth) {
      print('‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      print('‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    print('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${_currentUser?.name ?? "–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}');
    print('üîë –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: ${_currentSessionToken?.substring(0, 20) ?? "–Ω–µ—Ç"}...');
    print('‚úÖ AuthService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  Future<AuthResult> register({
    required String name,
    required String email,
    required String phone,
    required String password,
    String? referralCode,
  }) async {
    try {
      print('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API: $email');

      final validationResult = _validateRegistrationData(name, email, phone, password);
      if (!validationResult.success) {
        return validationResult;
      }

      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API
      final result = await _userService.registerUser(
        name: name,
        email: email,
        phone: phone,
        password: password,
        referralCode: referralCode,
      );

      print('üì° –†–µ–∑—É–ª—å—Ç–∞—Ç API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $result');

      if (result['success']) {
        print('üéâ API –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        final user = result['user'] as User;
        final accessToken = result['access_token'] as String;
        
        print('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ API: ${user.name} (${user.email})');
        print('üîë –¢–æ–∫–µ–Ω –∏–∑ API: ${accessToken.substring(0, 20)}...');
        
        await _createSession(user, accessToken);
        
        print('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º AuthResult');
        return AuthResult(
          success: true,
          message: result['message'] as String,
          user: user,
          sessionToken: accessToken,
        );
      } else {
        return AuthResult(
          success: false,
          message: result['error'] as String,
        );
      }

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e');
      return AuthResult(
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }

  Future<AuthResult> login({
    required String email,
    required String password,
  }) async {
    try {
      print('üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ API: $email');

      // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ API
      final result = await _userService.loginUser(
        email: email,
        password: password,
      );

      print('üì° –†–µ–∑—É–ª—å—Ç–∞—Ç API –≤—Ö–æ–¥–∞: $result');

      if (result['success']) {
        print('üéâ API –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞');
        final user = result['user'] as User;
        final accessToken = result['access_token'] as String;
        
        print('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ API –≤—Ö–æ–¥–∞: ${user.name} (${user.email})');
        print('üîë –¢–æ–∫–µ–Ω –∏–∑ API –≤—Ö–æ–¥–∞: ${accessToken.substring(0, 20)}...');
        
        await _createSession(user, accessToken);
        
        print('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º AuthResult');
        return AuthResult(
          success: true,
          message: result['message'] as String,
          user: user,
          sessionToken: accessToken,
        );
      } else {
        return AuthResult(
          success: false,
          message: result['error'] as String,
        );
      }

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: $e');
      return AuthResult(
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }

  Future<void> logout() async {
    try {
      print('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
      _currentUser = null;
      _currentSessionToken = null;
      
      // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –≤ ApiService
      ApiService.logout();
      
      print('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: $e');
    }
  }

  Future<void> _createSession(User user, String accessToken) async {
    try {
      print('üîê –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name}');
      print('üìß Email: ${user.email}');
      print('üÜî ID: ${user.id}');
      print('üîë –¢–æ–∫–µ–Ω: ${accessToken.substring(0, 20)}...');
      
      _currentUser = user;
      _currentSessionToken = accessToken;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ ApiService –¥–ª—è –∞–¥–º–∏–Ω API
      ApiService.setAuthToken(accessToken);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ OrderService
      final orderService = OrderService();
      orderService.setAuthToken(accessToken);

      print('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${user.name} —á–µ—Ä–µ–∑ API');
      print('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${_currentUser?.name}');
      print('üîë –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: ${_currentSessionToken?.substring(0, 20)}...');
      print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ isLoggedIn: ${isLoggedIn}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: $e');
    }
  }

  String _hashPassword(String password) {
    final bytes = utf8.encode(password);
    final digest = sha256.convert(bytes);
    return digest.toString();
  }

  bool _verifyPassword(String password, String hashedPassword) {
    return _hashPassword(password) == hashedPassword;
  }

  String _generateSessionToken() {
    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    final random = Random.secure();
    return List.generate(32, (index) => chars[random.nextInt(chars.length)]).join();
  }

  AuthResult _validateRegistrationData(String name, String email, String phone, String password) {
    if (name.isEmpty || email.isEmpty || phone.isEmpty || password.isEmpty) {
      return AuthResult(success: false, message: '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
    }
    if (!RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(email)) {
      return AuthResult(success: false, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
    }
    if (password.length < 6) {
      return AuthResult(success: false, message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
    }
    return AuthResult(success: true, message: '–î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API
  Future<void> debugPrintUsers() async {
    try {
      final users = await _userService.getAllUsers();
      print('üîç –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í API –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
      for (final user in users) {
        print('  - ID: ${user.id}, –ò–º—è: ${user.name}, Email: ${user.email}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  Future<AuthResult> updateProfile({
    String? name,
    String? phone,
    String? location, // –î–æ–±–∞–≤–ª—è—é –ª–æ–∫–∞—Ü–∏—é
  }) async {
    try {
      if (_currentSessionToken == null) {
        return AuthResult(
          success: false,
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
        );
      }

      final result = await _userService.updateProfile(
        accessToken: _currentSessionToken!,
        name: name,
        phone: phone,
        location: location, // –î–æ–±–∞–≤–ª—è—é –ª–æ–∫–∞—Ü–∏—é
      );

      if (result['success']) {
        final updatedUser = result['user'] as User;
        _currentUser = updatedUser;
        
        return AuthResult(
          success: true,
          message: result['message'] as String,
          user: updatedUser,
        );
      } else {
        return AuthResult(
          success: false,
          message: result['error'] as String,
        );
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: $e');
      return AuthResult(
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è',
      );
    }
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  Future<AuthResult> changePassword({
    required String currentPassword,
    required String newPassword,
  }) async {
    try {
      if (_currentSessionToken == null) {
        return AuthResult(
          success: false,
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
        );
      }

      final result = await _userService.changePassword(
        accessToken: _currentSessionToken!,
        currentPassword: currentPassword,
        newPassword: newPassword,
      );

      if (result['success']) {
        return AuthResult(
          success: true,
          message: result['message'] as String,
        );
      } else {
        return AuthResult(
          success: false,
          message: result['error'] as String,
        );
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: $e');
      return AuthResult(
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è',
      );
    }
  }

  // ===== –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê =====

  // –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
  Future<Map<String, dynamic>> getMyReferralCode() async {
    try {
      if (_currentSessionToken == null) {
        return {
          'success': false,
          'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
        };
      }

      return await _userService.getMyReferralCode(_currentSessionToken!);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: $e');
      return {
        'success': false,
        'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞',
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
  Future<Map<String, dynamic>> checkReferralCode(String referralCode) async {
    try {
      return await _userService.checkReferralCode(referralCode);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: $e');
      return {
        'success': false,
        'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞',
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  Future<Map<String, dynamic>> getReferralHistory() async {
    try {
      if (_currentSessionToken == null) {
        return {
          'success': false,
          'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
        };
      }

      return await _userService.getReferralHistory(_currentSessionToken!);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: $e');
      return {
        'success': false,
        'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
      };
    }
  }
}
