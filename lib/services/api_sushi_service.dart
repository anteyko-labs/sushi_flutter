import '../models/app_roll.dart';
import '../models/app_set.dart';
import 'api_service.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É—à–∏ —á–µ—Ä–µ–∑ API
/// –ó–∞–º–µ–Ω—è–µ—Ç SushiDataService –∏ CsvDataService
class ApiSushiService {
  static bool _isInitialized = false;

  static Future<void> initialize() async {
    if (_isInitialized) return;
    
    try {
      print('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ApiSushiService...');
      // API —Å–µ—Ä–≤–∏—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      _isInitialized = true;
      print('‚úÖ ApiSushiService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ApiSushiService: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–æ–ª–ª—ã
  static Future<List<AppRoll>> getRolls() async {
    await initialize();
    try {
      final rolls = await ApiService.getRolls();
      return rolls.map((roll) => roll.toAppRoll()).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–ª–æ–≤ —á–µ—Ä–µ–∑ API: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–æ–ª–ª—ã
  static Future<List<AppRoll>> getPopularRolls() async {
    await initialize();
    try {
      final rolls = await ApiService.getRolls();
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–æ–ª–ª—ã
      final popularRolls = rolls.where((roll) => roll.isPopular).toList();
      
      // –ï—Å–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–æ–ª–ª–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ä–æ–ª–ª—ã
      if (popularRolls.isEmpty) {
        print('‚ö†Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–æ–ª–ª–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ä–æ–ª–ª—ã');
        return rolls.map((roll) => roll.toAppRoll()).toList();
      }
      
      return popularRolls.map((roll) => roll.toAppRoll()).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–æ–ª–ª–æ–≤ —á–µ—Ä–µ–∑ API: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–æ–ª–ª—ã
  static Future<List<AppRoll>> getNewRolls() async {
    await initialize();
    try {
      final rolls = await ApiService.getRolls();
      // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ä–æ–ª–ª—ã
      final newRolls = rolls.where((roll) => roll.isNew).toList();
      
      // –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö —Ä–æ–ª–ª–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ä–æ–ª–ª—ã
      if (newRolls.isEmpty) {
        print('‚ö†Ô∏è –ù–æ–≤—ã—Ö —Ä–æ–ª–ª–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ä–æ–ª–ª—ã');
        return rolls.map((roll) => roll.toAppRoll()).toList();
      }
      
      return newRolls.map((roll) => roll.toAppRoll()).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–æ–ª–ª–æ–≤ —á–µ—Ä–µ–∑ API: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ—Ç—ã
  static Future<List<AppSet>> getSets() async {
    await initialize();
    try {
      final sets = await ApiService.getSets();
      return sets.map((set) => set.toAppSet()).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ API: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ç—ã
  static Future<List<AppSet>> getPopularSets() async {
    await initialize();
    try {
      final sets = await ApiService.getSets();
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ç—ã
      final popularSets = sets.where((set) => set.isPopular).toList();
      
      // –ï—Å–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ç–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–µ—Ç—ã
      if (popularSets.isEmpty) {
        print('‚ö†Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ç–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–µ—Ç—ã');
        return sets.map((set) => set.toAppSet()).toList();
      }
      
      return popularSets.map((set) => set.toAppSet()).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ API: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–ª –ø–æ ID
  static Future<AppRoll?> getRollById(int id) async {
    await initialize();
    try {
      final roll = await ApiService.getRollDetails(id);
      return roll.toAppRoll();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–ª–∞ –ø–æ ID —á–µ—Ä–µ–∑ API: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ç –ø–æ ID
  static Future<AppSet?> getSetById(int id) async {
    await initialize();
    try {
      final sets = await ApiService.getSets();
      final set = sets.firstWhere((set) => set.id == id);
      return set.toAppSet();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–∞ –ø–æ ID —á–µ—Ä–µ–∑ API: $e');
      return null;
    }
  }

  /// –ü–æ–∏—Å–∫ —Ä–æ–ª–ª–æ–≤
  static Future<List<AppRoll>> searchRolls(String query) async {
    await initialize();
    try {
      final rolls = await ApiService.getRolls();
      final filteredRolls = rolls.where((roll) => 
        roll.name.toLowerCase().contains(query.toLowerCase()) ||
        roll.description.toLowerCase().contains(query.toLowerCase())
      ).toList();
      return filteredRolls.map((roll) => roll.toAppRoll()).toList();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–æ–ª–ª–æ–≤ —á–µ—Ä–µ–∑ API: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  static Future<List<AppRoll>> getRollsByCategory(String category) async {
    final allRolls = await getRolls();
    return allRolls.where((roll) => 
      roll.category.toLowerCase() == category.toLowerCase()
    ).toList();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Å–æ—É—Å—ã, –Ω–∞–ø–∏—Ç–∫–∏)
  static Future<List<Map<String, dynamic>>> getOtherItems() async {
    await initialize();
    try {
      return await ApiService.getOtherItems();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–æ—É—Å—ã, –Ω–∞–ø–∏—Ç–∫–∏)
  static Future<List<Map<String, dynamic>>> getOtherItemsByCategory(String category) async {
    await initialize();
    try {
      return await ApiService.getOtherItemsByCategory(category);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $category —á–µ—Ä–µ–∑ API: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  static Future<Map<String, dynamic>> getStats() async {
    await initialize();
    try {
      final rolls = await getRolls();
      final sets = await getSets();
      final otherItems = await getOtherItems();
      
      return {
        'total_rolls': rolls.length,
        'total_sets': sets.length,
        'total_other_items': otherItems.length,
        'popular_rolls': rolls.where((r) => r.isPopular).length,
        'new_rolls': rolls.where((r) => r.isNew).length,
      };
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ API: $e');
      return {};
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤ —Å–µ—Ç–∞
  static Future<List<Map<String, dynamic>>> getSetComposition(int setId) async {
    await initialize();
    try {
      final response = await ApiService.getSetComposition(setId);
      return List<Map<String, dynamic>>.from(response['composition'] ?? []);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ç–∞: $e');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      return [];
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–¥–ª—è hot reload)
  static Future<void> refresh() async {
    _isInitialized = false;
    await initialize();
  }
}
