import 'dart:typed_data';
import 'package:flutter/services.dart' show rootBundle;
import 'package:excel/excel.dart';
import '../models/excel_roll.dart';
import '../models/excel_set.dart';
import '../models/app_roll.dart';
import '../models/app_set.dart';

/// –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤
/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Excel —Ñ–∞–π–ª–∞—Ö
class ExcelDataService {
  static List<ExcelRoll> _excelRolls = [];
  static List<ExcelSet> _excelSets = [];
  static Map<int, List<String>> _setComposition = {};
  static bool _isInitialized = false;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤
  static Future<void> initialize() async {
    if (_isInitialized) return;
    
    try {
      print('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–ª—ã
      await _loadRollsFromExcel();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ç—ã
      await _loadSetsFromExcel();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–∞–≤ —Å–µ—Ç–æ–≤
      await _loadSetCompositionFromExcel();
      
      _isInitialized = true;
      print('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Excel!');
      print('üìä –†–æ–ª–ª–æ–≤: ${_excelRolls.length}, –°–µ—Ç–æ–≤: ${_excelSets.length}');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ExcelDataService: $e');
      _loadMockData(); // Fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–ª–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞
  static Future<void> _loadRollsFromExcel() async {
    try {
      final ByteData data = await rootBundle.load('assets/data/rolls.xlsx');
      final Uint8List bytes = data.buffer.asUint8List();
      final Excel excel = Excel.decodeBytes(bytes);
      
      _excelRolls.clear();
      
      // –ò—â–µ–º –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      for (String tableName in excel.tables.keys) {
        final table = excel.tables[tableName]!;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
        for (int i = 1; i < table.rows.length; i++) {
          final row = table.rows[i];
          if (row == null || row.isEmpty) continue;
          
          try {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Data? –≤ dynamic
            final List<dynamic> rowData = row.map((cell) => cell?.value).toList();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (rowData.length >= 3 && 
                rowData[0] != null && 
                rowData[1] != null && 
                rowData[2] != null) {
              
              final roll = ExcelRoll.fromExcelRow(rowData);
              
              // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–æ–ª–ª—ã —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π
              if (roll.salePrice > 0) {
                _excelRolls.add(roll);
              }
            }
          } catch (e) {
            print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ —Ä–æ–ª–ª–æ–≤: $e');
            continue;
          }
        }
        break; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é (–∏ –æ–±—ã—á–Ω–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é) —Ç–∞–±–ª–∏—Ü—É
      }
      
      print('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_excelRolls.length} —Ä–æ–ª–ª–æ–≤ –∏–∑ Excel');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–ª–æ–≤ –∏–∑ Excel: $e');
      throw e;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞
  static Future<void> _loadSetsFromExcel() async {
    try {
      final ByteData data = await rootBundle.load('assets/data/sets.xlsx');
      final Uint8List bytes = data.buffer.asUint8List();
      final Excel excel = Excel.decodeBytes(bytes);
      
      _excelSets.clear();
      
      for (String tableName in excel.tables.keys) {
        final table = excel.tables[tableName]!;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for (int i = 1; i < table.rows.length; i++) {
          final row = table.rows[i];
          if (row == null || row.isEmpty) continue;
          
          try {
            final List<dynamic> rowData = row.map((cell) => cell?.value).toList();
            
            if (rowData.length >= 8 && rowData[0] != null) {
              final set = ExcelSet.fromExcelRow(rowData);
              _excelSets.add(set);
            }
          } catch (e) {
            print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Ç–æ–≤: $e');
            continue;
          }
        }
        break;
      }
      
      print('üéÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_excelSets.length} —Å–µ—Ç–æ–≤ –∏–∑ Excel');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–æ–≤ –∏–∑ Excel: $e');
      throw e;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ç–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞
  static Future<void> _loadSetCompositionFromExcel() async {
    try {
      final ByteData data = await rootBundle.load('assets/data/set_composition.xlsx');
      final Uint8List bytes = data.buffer.asUint8List();
      final Excel excel = Excel.decodeBytes(bytes);
      
      _setComposition.clear();
      
      for (String tableName in excel.tables.keys) {
        final table = excel.tables[tableName]!;
        
        for (int i = 1; i < table.rows.length; i++) {
          final row = table.rows[i];
          if (row == null || row.isEmpty) continue;
          
          try {
            final List<dynamic> rowData = row.map((cell) => cell?.value).toList();
            
            if (rowData.length >= 3 && 
                rowData[0] != null && 
                rowData[2] != null) {
              
              final setId = rowData[0] is int ? rowData[0] : int.tryParse(rowData[0].toString());
              final rollName = rowData[2]?.toString();
              
              if (setId != null && rollName != null && rollName.isNotEmpty) {
                if (!_setComposition.containsKey(setId)) {
                  _setComposition[setId] = [];
                }
                _setComposition[setId]!.add(rollName);
              }
            }
          } catch (e) {
            print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ç–æ–≤: $e');
            continue;
          }
        }
        break;
      }
      
      print('üîó –ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Å—Ç–∞–≤ —Å–µ—Ç–æ–≤: ${_setComposition.length} —Å–µ—Ç–æ–≤');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ç–æ–≤: $e');
      throw e;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–æ–ª–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ AppRoll
  static Future<List<AppRoll>> getRolls() async {
    await initialize();
    
    final appRolls = <AppRoll>[];
    for (int i = 0; i < _excelRolls.length; i++) {
      final excelRoll = _excelRolls[i];
      final rollData = excelRoll.toAppRoll(); // Removed unsupported parameters
      
      appRolls.add(AppRoll(
        id: rollData['id'] ?? 0,
        name: rollData['name'] ?? '',
        price: (rollData['price'] ?? 0.0).toDouble(),
        description: rollData['description'] ?? '',
        imageUrl: rollData['imageUrl'] ?? '',
        category: rollData['category'] ?? '–†–æ–ª–ª—ã',
        isPopular: rollData['isPopular'] ?? false,
        isNew: rollData['isNew'] ?? false,
        rating: (rollData['rating'] ?? 4.5).toDouble(),
        preparationTime: rollData['preparationTime'] ?? 15,
        originalPrice: (rollData['originalPrice'] ?? 0.0).toDouble(),
        discount: (rollData['discount'] ?? 0.0).toDouble(),
      ));
    }
    
    return appRolls;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–æ–ª–ª—ã
  static Future<List<AppRoll>> getPopularRolls() async {
    final allRolls = await getRolls();
    return allRolls.where((roll) => roll.isPopular).toList();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–æ–ª–ª—ã
  static Future<List<AppRoll>> getNewRolls() async {
    final allRolls = await getRolls();
    return allRolls.where((roll) => roll.isNew).toList();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ AppSet
  static Future<List<AppSet>> getSets() async {
    await initialize();
    
    final appSets = <AppSet>[];
    for (final excelSet in _excelSets) {
      final rollNames = _setComposition[excelSet.id] ?? [];
      final setWithRolls = excelSet.withRolls(rollNames);
      final setData = setWithRolls.toAppSet();
      
      // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ç–∞
      final setRolls = <AppRoll>[];
      final allRolls = await getRolls();
      
      for (final rollName in rollNames) {
        final matchingRoll = allRolls.firstWhere(
          (roll) => roll.name.toLowerCase() == rollName.toLowerCase(),
          orElse: () => AppRoll(
            id: 0,
            name: rollName,
            price: 100,
            description: '–†–æ–ª–ª "$rollName"',
            imageUrl: 'https://images.pexels.com/photos/357756/pexels-photo-357756.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
            category: '–†–æ–ª–ª—ã',
            isPopular: false, // Added missing parameter
            isNew: false, // Added missing parameter
          ),
        );
        setRolls.add(matchingRoll);
      }
      
      final appSet = AppSet(
        id: setData['id'],
        name: setData['name'],
        description: setData['description'],
        price: setData['price'],
        imageUrl: setData['imageUrl'],
        rolls: setRolls,
        isPopular: setData['isPopular'],
        discount: setData['discount'],
        originalPrice: setData['originalPrice'],
      );
      
      appSets.add(appSet);
    }
    
    return appSets;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ç—ã
  static Future<List<AppSet>> getPopularSets() async {
    final allSets = await getSets();
    return allSets.where((set) => set.isPopular).toList();
  }

  /// –ü–æ–∏—Å–∫ —Ä–æ–ª–ª–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  static Future<List<AppRoll>> searchRolls(String query) async {
    final allRolls = await getRolls();
    return allRolls.where((roll) => 
      roll.name.toLowerCase().contains(query.toLowerCase()) ||
      roll.description.toLowerCase().contains(query.toLowerCase())
    ).toList();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–ª –ø–æ ID
  static Future<AppRoll?> getRollById(int id) async {
    final allRolls = await getRolls();
    try {
      return allRolls.firstWhere((roll) => roll.id == id);
    } catch (e) {
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ç –ø–æ ID
  static Future<AppSet?> getSetById(int id) async {
    final allSets = await getSets();
    try {
      return allSets.firstWhere((set) => set.id == id);
    } catch (e) {
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  static Future<Map<String, dynamic>> getStats() async {
    await initialize();
    
    final allRolls = await getRolls();
    final allSets = await getSets();
    
    return {
      'totalRolls': allRolls.length,
      'totalSets': allSets.length,
      'popularRolls': allRolls.where((r) => r.isPopular).length,
      'popularSets': allSets.where((s) => s.isPopular).length,
      'averageRollPrice': allRolls.isNotEmpty 
        ? allRolls.map((r) => r.price).reduce((a, b) => a + b) / allRolls.length 
        : 0.0,
      'averageSetPrice': allSets.isNotEmpty 
        ? allSets.map((s) => s.price).reduce((a, b) => a + b) / allSets.length 
        : 0.0,
    };
  }

  /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ä–æ–ª–ª–∞
  static bool _isPopularRoll(String name, int position) {
    final popularNames = [
      '—Ñ–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', '–∫–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è', '–ª–æ—Å–æ—Å—å —Ç–µ–º–ø—É—Ä–∞', '–æ—Å—Ç—Ä—ã–π –ª–æ—Å–æ—Å—å',
      '–∫—É—Ä–∏—Ü–∞ —Ç–µ–º–ø—É—Ä–∞', '—Å–ª–∞–¥–∫–∏–π —Ä–æ–ª–ª', '–∑–∞–ø–µ—á –º–∞–≥–∏—Å—Ç—Ä', '–∑–∞–ø–µ—á —Ñ–∏–ª–∞'
    ];
    
    return popularNames.any((popular) => 
      name.toLowerCase().contains(popular.toLowerCase())
    ) || position < 8; // –ü–µ—Ä–≤—ã–µ 8 —Ä–æ–ª–ª–æ–≤ —Ç–æ–∂–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
  }

  /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–∏–∑–Ω—ã —Ä–æ–ª–ª–∞
  static bool _isNewRoll(String name, int position) {
    final newNames = [
      '—Ç–µ–º–ø—É—Ä–∞', '–∑–∞–ø–µ—á', '—Å–ø–µ—à–ª', '–ø—Ä–µ–º–∏—É–º', '–º–∞–≥–∏—Å—Ç—Ä'
    ];
    
    return newNames.any((newWord) => 
      name.toLowerCase().contains(newWord.toLowerCase())
    ) || position >= _excelRolls.length - 5; // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–æ–ª–ª–æ–≤ –Ω–æ–≤—ã–µ
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  static void _loadMockData() {
    print('‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    
    _excelRolls = [
      ExcelRoll(id: 1, name: '–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', salePrice: 250),
      ExcelRoll(id: 2, name: '–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è', salePrice: 200),
      ExcelRoll(id: 3, name: '–õ–æ—Å–æ—Å—å —Ç–µ–º–ø—É—Ä–∞', salePrice: 280),
    ];
    
    _excelSets = [
      ExcelSet(
        id: 1, name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', costPrice: 400, retailPrice: 800,
        setPrice: 650, discountPercent: 19, grossProfit: 250, marginPercent: 200,
      ),
    ];
    
    _setComposition = {
      1: ['–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', '–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è', '–õ–æ—Å–æ—Å—å —Ç–µ–º–ø—É—Ä–∞'],
    };
    
    _isInitialized = true;
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–¥–ª—è hot reload)
  static Future<void> refresh() async {
    _isInitialized = false;
    _excelRolls.clear();
    _excelSets.clear();
    _setComposition.clear();
    await initialize();
  }
}
