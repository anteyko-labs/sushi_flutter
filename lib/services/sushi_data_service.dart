import '../models/app_roll.dart';
import '../models/app_set.dart';
import 'csv_data_service.dart';

/// –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ CsvDataService –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
/// –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö CSV —Ñ–∞–π–ª–æ–≤
class SushiDataService {
  static bool _isInitialized = false;

  static Future<void> initialize() async {
    if (_isInitialized) return;
    
    try {
      print('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SushiDataService —á–µ—Ä–µ–∑ CsvDataService...');
      await CsvDataService.initialize();
      _isInitialized = true;
      print('‚úÖ SushiDataService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SushiDataService: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–æ–ª–ª—ã
  static Future<List<AppRoll>> getRolls() async {
    await initialize();
    return await CsvDataService.getRolls();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–æ–ª–ª—ã
  static Future<List<AppRoll>> getPopularRolls() async {
    await initialize();
    return await CsvDataService.getPopularRolls();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–æ–ª–ª—ã
  static Future<List<AppRoll>> getNewRolls() async {
    await initialize();
    return await CsvDataService.getNewRolls();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ—Ç—ã
  static Future<List<AppSet>> getSets() async {
    await initialize();
    return await CsvDataService.getSets();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ç—ã
  static Future<List<AppSet>> getPopularSets() async {
    await initialize();
    return await CsvDataService.getPopularSets();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–ª –ø–æ ID
  static Future<AppRoll?> getRollById(int id) async {
    await initialize();
    return await CsvDataService.getRollById(id);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ç –ø–æ ID
  static Future<AppSet?> getSetById(int id) async {
    await initialize();
    return await CsvDataService.getSetById(id);
  }

  /// –ü–æ–∏—Å–∫ —Ä–æ–ª–ª–æ–≤
  static Future<List<AppRoll>> searchRolls(String query) async {
    await initialize();
    return await CsvDataService.searchRolls(query);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  static Future<List<AppRoll>> getRollsByCategory(String category) async {
    final allRolls = await getRolls();
    return allRolls.where((roll) => 
      roll.category.toLowerCase() == category.toLowerCase()
    ).toList();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  static Future<Map<String, dynamic>> getStats() async {
    await initialize();
    return await CsvDataService.getStats();
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ç (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
  static Future<bool> addCustomSet({
    required String name,
    required String description,
    required List<AppRoll> rolls,
    double discount = 0.0,
    bool isPopular = false,
  }) async {
    try {
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–ø–∏—Å–∏ –≤ Excel —Ñ–∞–π–ª
      print('üéÅ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–µ—Ç: $name —Å ${rolls.length} —Ä–æ–ª–ª–∞–º–∏');
      return true;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∞: $e');
      return false;
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–¥–ª—è hot reload)
  static Future<void> refresh() async {
    _isInitialized = false;
    await initialize();
  }
}