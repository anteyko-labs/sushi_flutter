import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/order.dart';
import '../models/user.dart';

class OrderService {
  static const String baseUrl = 'http://localhost:5002/api';
  String? _authToken;

  void setAuthToken(String token) {
    _authToken = token;
  }

  Map<String, String> get _headers => {
    'Content-Type': 'application/json',
    if (_authToken != null) 'Authorization': 'Bearer $_authToken',
  };

  // –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
  Future<Map<String, dynamic>> createOrder({
    required String deliveryAddress,
    required double deliveryLatitude,
    required double deliveryLongitude,
    required List<Map<String, dynamic>> cartItems,
    String? notes,
    String? deliveryInstructions,
  }) async {
    try {
      print('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...');
      
      final response = await http.post(
        Uri.parse('$baseUrl/orders'),
        headers: _headers,
        body: json.encode({
          'delivery_address': deliveryAddress,
          'delivery_latitude': deliveryLatitude,
          'delivery_longitude': deliveryLongitude,
          'items': cartItems,
          'notes': notes,
          'delivery_instructions': deliveryInstructions,
        }),
      );

      print('üì¶ –û—Ç–≤–µ—Ç API –∑–∞–∫–∞–∑–∞: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 201) {
        final data = json.decode(response.body);
        print('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        return {
          'success': true,
          'order': data['order'],
          'message': data['message'] ?? '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
        };
      } else {
        final errorData = json.decode(response.body);
        print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${errorData['detail']}');
        return {
          'success': false,
          'message': errorData['detail'] ?? '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞',
        };
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: $e');
      return {
        'success': false,
        'message': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<List<Order>> getUserOrders() async {
    try {
      print('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      final response = await http.get(
        Uri.parse('$baseUrl/orders'),
        headers: _headers,
      );

      print('üìã –û—Ç–≤–µ—Ç API –∑–∞–∫–∞–∑–æ–≤: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final orders = (data['orders'] as List)
            .map((order) => Order.fromJson(order))
            .toList();
        
        print('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}');
        return orders;
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤');
        return [];
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: $e');
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–¥–ª—è —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞)
  Future<List<Order>> getAllOrders() async {
    try {
      print('üë®‚Äçüç≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤...');
      
      final response = await http.get(
        Uri.parse('$baseUrl/orders/all'),
        headers: _headers,
      );

      print('üë®‚Äçüç≥ –û—Ç–≤–µ—Ç API –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final orders = (data['orders'] as List)
            .map((order) => Order.fromJson(order))
            .toList();
        
        print('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}');
        return orders;
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤');
        return [];
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤: $e');
      return [];
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
  Future<bool> updateOrderStatus(int orderId, OrderStatus newStatus) async {
    try {
      print('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ $orderId –Ω–∞ ${newStatus.displayName}...');
      
      final response = await http.put(
        Uri.parse('$baseUrl/orders/$orderId/status'),
        headers: _headers,
        body: json.encode({
          'status': newStatus.toApiString(),
        }),
      );

      print('üîÑ –û—Ç–≤–µ—Ç API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        print('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
        return true;
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞');
        return false;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: $e');
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
  Future<Order?> getOrderById(int orderId) async {
    try {
      print('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ $orderId...');
      
      final response = await http.get(
        Uri.parse('$baseUrl/orders/$orderId'),
        headers: _headers,
      );

      print('üîç –û—Ç–≤–µ—Ç API –∑–∞–∫–∞–∑–∞: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final order = Order.fromJson(data['order']);
        
        print('‚úÖ –ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω');
        return order;
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
        return null;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: $e');
      return null;
    }
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
  Future<bool> cancelOrder(int orderId) async {
    try {
      print('‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ $orderId...');
      
      final response = await http.put(
        Uri.parse('$baseUrl/orders/$orderId/cancel'),
        headers: _headers,
      );

      print('‚ùå –û—Ç–≤–µ—Ç API –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        print('‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω');
        return true;
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞');
        return false;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: $e');
      return false;
    }
  }
}
