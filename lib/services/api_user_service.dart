import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/user.dart';

class ApiUserService {
  static final ApiUserService _instance = ApiUserService._internal();
  factory ApiUserService() => _instance;
  ApiUserService._internal();

  static const String _baseUrl = 'http://localhost:5002/api'; // Localhost –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  static const Map<String, String> _headers = {
    'Content-Type': 'application/json',
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Ç–ª–∞–¥–∫–∞)
  Future<List<User>> getAllUsers() async {
    try {
      print('üåê API: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      final response = await http.get(
        Uri.parse('$_baseUrl/debug/users'),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        final jsonData = jsonDecode(response.body);
        final usersList = jsonData['users'] as List<dynamic>;
        final users = usersList.map((userData) => User.fromJson(userData)).toList();
        
        print('‚úÖ API: –ü–æ–ª—É—á–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        return users;
      } else {
        print('‚ùå API: –û—à–∏–±–∫–∞ ${response.statusCode}: ${response.body}');
        return [];
      }
    } catch (e) {
      print('‚ùå API: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
      return [];
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<Map<String, dynamic>> registerUser({
    required String name,
    required String email,
    required String phone,
    required String password,
    String? referralCode,
  }) async {
    try {
      print('üåê API: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $email...');
      
      final requestBody = {
        'name': name,
        'email': email,
        'phone': phone,
        'password': password,
      };
      
      if (referralCode != null && referralCode.isNotEmpty) {
        requestBody['referral_code'] = referralCode;
      }
      
      final response = await http.post(
        Uri.parse('$_baseUrl/register'),
        headers: _headers,
        body: jsonEncode(requestBody),
      );

      final jsonData = jsonDecode(response.body);
      print('üì° API –æ—Ç–≤–µ—Ç: ${response.statusCode} - ${response.body}');
      
      if (response.statusCode == 201) {
        print('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $email —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        print('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${jsonData['user']}');
        print('üîë –¢–æ–∫–µ–Ω: ${jsonData['access_token']?.substring(0, 20)}...');
        
        final user = User.fromJson(jsonData['user']);
        print('üë§ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç User: ${user.name} (${user.email})');
        
        return {
          'success': true,
          'user': user,
          'access_token': jsonData['access_token'],
          'message': jsonData['message'],
        };
      } else {
        print('‚ùå API: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${jsonData['error']}');
        return {
          'success': false,
          'error': jsonData['error'],
        };
      }
    } catch (e) {
      print('‚ùå API: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<Map<String, dynamic>> loginUser({
    required String email,
    required String password,
  }) async {
    try {
      print('üåê API: –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $email...');
      
      final response = await http.post(
        Uri.parse('$_baseUrl/login'),
        headers: _headers,
        body: jsonEncode({
          'email': email,
          'password': password,
        }),
      );

      final jsonData = jsonDecode(response.body);
      print('üì° API –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥: ${response.statusCode} - ${response.body}');
      
      if (response.statusCode == 200) {
        print('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $email —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª');
        print('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${jsonData['user']}');
        print('üîë –¢–æ–∫–µ–Ω: ${jsonData['access_token']?.substring(0, 20)}...');
        
        final user = User.fromJson(jsonData['user']);
        print('üë§ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç User –¥–ª—è –≤—Ö–æ–¥–∞: ${user.name} (${user.email})');
        
        return {
          'success': true,
          'user': user,
          'access_token': jsonData['access_token'],
          'message': jsonData['message'],
        };
      } else {
        print('‚ùå API: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${jsonData['error']}');
        return {
          'success': false,
          'error': jsonData['error'],
        };
      }
    } catch (e) {
      print('‚ùå API: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (—Ç—Ä–µ–±—É–µ—Ç JWT —Ç–æ–∫–µ–Ω)
  Future<User?> getUserProfile(String accessToken) async {
    try {
      print('üåê API: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      final response = await http.get(
        Uri.parse('$_baseUrl/profile'),
        headers: {
          ..._headers,
          'Authorization': 'Bearer $accessToken',
        },
      );

      if (response.statusCode == 200) {
        final jsonData = jsonDecode(response.body);
        final user = User.fromJson(jsonData['user']);
        print('‚úÖ API: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω –¥–ª—è ${user.name}');
        return user;
      } else {
        print('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('‚ùå API: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: $e');
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API
  Future<bool> checkApiHealth() async {
    try {
      print('üåê API: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
      
      final response = await http.get(
        Uri.parse('$_baseUrl/health'),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        print('‚úÖ API: –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return true;
      } else {
        print('‚ùå API: –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
        return false;
      }
    } catch (e) {
      print('‚ùå API: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: $e');
      return false;
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
  Future<User?> findUserByEmail(String email) async {
    try {
      final users = await getAllUsers();
      return users.cast<User?>().firstWhere(
        (user) => user?.email == email.toLowerCase(),
        orElse: () => null,
      );
    } catch (e) {
      print('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è email
  Future<bool> isEmailTaken(String email) async {
    try {
      final user = await findUserByEmail(email);
      return user != null;
    } catch (e) {
      print('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email: $e');
      return false;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<Map<String, dynamic>> updateProfile({
    required String accessToken,
    String? name,
    String? phone,
    String? location, // –î–æ–±–∞–≤–ª—è—é –ª–æ–∫–∞—Ü–∏—é
  }) async {
    try {
      print('üåê API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...');
      
      final response = await http.put(
        Uri.parse('$_baseUrl/profile/update'),
        headers: {
          ..._headers,
          'Authorization': 'Bearer $accessToken',
        },
        body: jsonEncode({
          if (name != null) 'name': name,
          if (phone != null) 'phone': phone,
          if (location != null) 'location': location, // –î–æ–±–∞–≤–ª—è—é –ª–æ–∫–∞—Ü–∏—é
        }),
      );

      final jsonData = jsonDecode(response.body);
      
      if (response.statusCode == 200) {
        print('‚úÖ API: –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        return {
          'success': true,
          'user': User.fromJson(jsonData['user']),
          'message': jsonData['message'],
        };
      } else {
        print('‚ùå API: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${jsonData['error']}');
        return {
          'success': false,
          'error': jsonData['error'],
        };
      }
    } catch (e) {
      print('‚ùå API: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  Future<Map<String, dynamic>> changePassword({
    required String accessToken,
    required String currentPassword,
    required String newPassword,
  }) async {
    try {
      print('üåê API: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
      
      final response = await http.put(
        Uri.parse('$_baseUrl/profile/change-password'),
        headers: {
          ..._headers,
          'Authorization': 'Bearer $accessToken',
        },
        body: jsonEncode({
          'current_password': currentPassword,
          'new_password': newPassword,
        }),
      );

      final jsonData = jsonDecode(response.body);
      
      if (response.statusCode == 200) {
        print('‚úÖ API: –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
        return {
          'success': true,
          'message': jsonData['message'],
        };
      } else {
        print('‚ùå API: –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ${jsonData['error']}');
        return {
          'success': false,
          'error': jsonData['error'],
        };
      }
    } catch (e) {
      print('‚ùå API: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // ===== –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê =====

  // –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
  Future<Map<String, dynamic>> getMyReferralCode(String accessToken) async {
    try {
      print('üåê API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞...');
      
      final response = await http.get(
        Uri.parse('$_baseUrl/referral/my-code'),
        headers: {
          ..._headers,
          'Authorization': 'Bearer $accessToken',
        },
      );

      final jsonData = jsonDecode(response.body);
      print('üì° API –æ—Ç–≤–µ—Ç: ${response.statusCode} - ${response.body}');
      
      if (response.statusCode == 200) {
        print('‚úÖ API: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω');
        return {
          'success': true,
          'referral_code': jsonData['referral_code'],
          'bonus_points': jsonData['bonus_points'],
          'referrals_count': jsonData['referrals_count'],
        };
      } else {
        print('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: ${jsonData['error']}');
        return {
          'success': false,
          'error': jsonData['error'],
        };
      }
    } catch (e) {
      print('‚ùå API: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
  Future<Map<String, dynamic>> checkReferralCode(String referralCode) async {
    try {
      print('üåê API: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: $referralCode');
      
      final response = await http.post(
        Uri.parse('$_baseUrl/referral/check-code'),
        headers: _headers,
        body: jsonEncode({
          'referral_code': referralCode,
        }),
      );

      final jsonData = jsonDecode(response.body);
      print('üì° API –æ—Ç–≤–µ—Ç: ${response.statusCode} - ${response.body}');
      
      if (response.statusCode == 200) {
        print('‚úÖ API: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤–∞–ª–∏–¥–µ–Ω');
        return {
          'success': true,
          'valid': jsonData['valid'],
          'referrer_name': jsonData['referrer_name'],
          'message': jsonData['message'],
        };
      } else {
        print('‚ùå API: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: ${jsonData['error']}');
        return {
          'success': false,
          'error': jsonData['error'],
        };
      }
    } catch (e) {
      print('‚ùå API: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  Future<Map<String, dynamic>> getReferralHistory(String accessToken) async {
    try {
      print('üåê API: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...');
      
      final response = await http.get(
        Uri.parse('$_baseUrl/referral/history'),
        headers: {
          ..._headers,
          'Authorization': 'Bearer $accessToken',
        },
      );

      final jsonData = jsonDecode(response.body);
      print('üì° API –æ—Ç–≤–µ—Ç: ${response.statusCode} - ${response.body}');
      
      if (response.statusCode == 200) {
        print('‚úÖ API: –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞');
        return {
          'success': true,
          'referred_by': jsonData['referred_by'],
          'referrals_made': jsonData['referrals_made'],
          'total_referrals_made': jsonData['total_referrals_made'],
          'total_bonus_points_earned': jsonData['total_bonus_points_earned'],
        };
      } else {
        print('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${jsonData['error']}');
        return {
          'success': false,
          'error': jsonData['error'],
        };
      }
    } catch (e) {
      print('‚ùå API: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }
}
