import 'package:flutter/material.dart';
import 'package:latlong2/latlong.dart';
import 'package:geolocator/geolocator.dart';
import 'dart:math' as math;
import 'dart:convert';
import 'package:http/http.dart' as http;

class Real2GisWebScreen extends StatefulWidget {
  final LatLng initialCenter;
  final Function(LatLng coordinates, String address) onLocationSelected;

  const Real2GisWebScreen({
    Key? key,
    required this.initialCenter,
    required this.onLocationSelected,
  }) : super(key: key);

  @override
  State<Real2GisWebScreen> createState() => _Real2GisWebScreenState();
}

class _Real2GisWebScreenState extends State<Real2GisWebScreen> {
  LatLng _selectedLocation = const LatLng(42.8746, 74.5698);
  String _selectedAddress = '';
  double _distance = 0;
  bool _isDeliveryAvailable = false;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _selectedLocation = widget.initialCenter;
    _updateLocationInfo();
  }

  void _updateLocationInfo() async {
    setState(() {
      _isLoading = true;
    });

    try {
      String address = await _getAddressFrom2Gis(_selectedLocation);
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä –ë–∏—à–∫–µ–∫–∞)
      const restaurantLocation = LatLng(42.8746, 74.5698);
      final distance = _calculateDistance(restaurantLocation, _selectedLocation);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (15 –∫–º —Ä–∞–¥–∏—É—Å)
      final isDeliveryAvailable = distance <= 15.0;

      setState(() {
        _selectedAddress = address;
        _distance = distance;
        _isDeliveryAvailable = isDeliveryAvailable;
        _isLoading = false;
      });
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: $e');
      setState(() {
        _selectedAddress = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞';
        _isLoading = false;
      });
    }
  }

  Future<String> _getAddressFrom2Gis(LatLng coordinates) async {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º 2GIS Catalog API –¥–ª—è reverse geocoding
      final apiKey = '3f562b3d-78e5-48e4-accd-406754cb15fb';
      final url = 'https://catalog.api.2gis.com/3.0/items/geocode?'
          'lat=${coordinates.latitude}&'
          'lon=${coordinates.longitude}&'
          'key=$apiKey';
      
      print('üåê –ó–∞–ø—Ä–æ—Å –∫ 2GIS API: $url');
      
      final response = await http.get(Uri.parse(url));
      
      print('üì° –û—Ç–≤–µ—Ç –æ—Ç 2GIS API: ${response.statusCode}');
      print('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');
      
      if (response.statusCode == 200) {
        final json = jsonDecode(response.body);
        if (json['result'] != null && json['result'].isNotEmpty) {
          final item = json['result'][0];
          final address = item['address_name'] ?? '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
          print('‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å: $address');
          return address;
        }
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ 2GIS API: $e');
    }
    
    return '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
  }

  double _calculateDistance(LatLng point1, LatLng point2) {
    const double earthRadius = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    
    final double lat1Rad = point1.latitude * (math.pi / 180);
    final double lat2Rad = point2.latitude * (math.pi / 180);
    final double deltaLatRad = (point2.latitude - point1.latitude) * (math.pi / 180);
    final double deltaLonRad = (point2.longitude - point1.longitude) * (math.pi / 180);

    final double a = math.sin(deltaLatRad / 2) * math.sin(deltaLatRad / 2) +
        math.cos(lat1Rad) * math.cos(lat2Rad) *
        math.sin(deltaLonRad / 2) * math.sin(deltaLonRad / 2);
    final double c = 2 * math.asin(math.sqrt(a));

    return earthRadius * c;
  }

  void _updateCoordinates() {
    final latitudeController = TextEditingController(text: _selectedLocation.latitude.toString());
    final longitudeController = TextEditingController(text: _selectedLocation.longitude.toString());

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: latitudeController,
              decoration: const InputDecoration(
                labelText: '–®–∏—Ä–æ—Ç–∞',
                hintText: '42.8746',
              ),
              keyboardType: TextInputType.numberWithOptions(decimal: true),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: longitudeController,
              decoration: const InputDecoration(
                labelText: '–î–æ–ª–≥–æ—Ç–∞',
                hintText: '74.5698',
              ),
              keyboardType: TextInputType.numberWithOptions(decimal: true),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () {
              try {
                final lat = double.parse(latitudeController.text);
                final lon = double.parse(longitudeController.text);
                setState(() {
                  _selectedLocation = LatLng(lat, lon);
                });
                Navigator.of(context).pop();
                _updateLocationInfo();
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')),
                );
              }
            },
            child: const Text('–û–±–Ω–æ–≤–∏—Ç—å'),
          ),
        ],
      ),
    );
  }

  void _getCurrentLocation() async {
    try {
      final position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );
      
      setState(() {
        _selectedLocation = LatLng(position.latitude, position.longitude);
      });
      
      _updateLocationInfo();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')),
      );
    }
  }

  void _searchAddress() {
    final addressController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: addressController,
              decoration: const InputDecoration(
                labelText: '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å',
                hintText: '–ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –ß—É–π 123, –ë–∏—à–∫–µ–∫',
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () async {
              if (addressController.text.isNotEmpty) {
                Navigator.of(context).pop();
                await _searchAddressByText(addressController.text);
              }
            },
            child: const Text('–ù–∞–π—Ç–∏'),
          ),
        ],
      ),
    );
  }

  Future<void> _searchAddressByText(String address) async {
    setState(() {
      _isLoading = true;
    });

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º 2GIS Search API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞
      final apiKey = '3f562b3d-78e5-48e4-accd-406754cb15fb';
      final url = 'https://catalog.api.2gis.com/3.0/items?'
          'q=$address&'
          'type=branch&'
          'key=$apiKey';
      
      print('üîç –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞: $url');
      
      final response = await http.get(Uri.parse(url));
      
      if (response.statusCode == 200) {
        final json = jsonDecode(response.body);
        if (json['result'] != null && json['result'].isNotEmpty) {
          final item = json['result'][0];
          if (item['point'] != null) {
            final point = item['point'];
            final lat = point['lat'];
            final lon = point['lon'];
            
            setState(() {
              _selectedLocation = LatLng(lat, lon);
            });
            
            _updateLocationInfo();
            return;
          }
        }
      }
      
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')),
      );
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞')),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 0,
        actions: [
          IconButton(
            icon: const Icon(Icons.search),
            onPressed: _searchAddress,
            tooltip: '–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞',
          ),
          IconButton(
            icon: const Icon(Icons.edit_location),
            onPressed: _updateCoordinates,
            tooltip: '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã',
          ),
          IconButton(
            icon: const Icon(Icons.my_location),
            onPressed: _getCurrentLocation,
            tooltip: '–ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
          ),
        ],
      ),
      body: Column(
        children: [
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            color: Colors.grey[100],
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '2GIS API - –í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è',
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                    color: Colors.grey[600],
                  ),
                ),
              ],
            ),
          ),
          
          // –ó–∞–≥–ª—É—à–∫–∞ –∫–∞—Ä—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          Expanded(
            child: Container(
              margin: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey[300]!),
                borderRadius: BorderRadius.circular(8),
              ),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Container(
                  width: double.infinity,
                  height: double.infinity,
                  color: Colors.grey[100],
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Icon(
                        Icons.map,
                        size: 64,
                        color: Colors.blue,
                      ),
                      const SizedBox(height: 16),
                      const Text(
                        '2GIS API (Web –≤–µ—Ä—Å–∏—è)',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.blue,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        '–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n${_selectedLocation.latitude.toStringAsFixed(4)}, ${_selectedLocation.longitude.toStringAsFixed(4)}',
                        textAlign: TextAlign.center,
                        style: const TextStyle(
                          fontSize: 14,
                          color: Colors.grey,
                        ),
                      ),
                      const SizedBox(height: 16),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          ElevatedButton.icon(
                            onPressed: _searchAddress,
                            icon: const Icon(Icons.search),
                            label: const Text('–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞'),
                          ),
                          const SizedBox(width: 16),
                          ElevatedButton.icon(
                            onPressed: _updateCoordinates,
                            icon: const Icon(Icons.edit_location),
                            label: const Text('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'),
                          ),
                          const SizedBox(width: 16),
                          ElevatedButton.icon(
                            onPressed: _getCurrentLocation,
                            icon: const Icon(Icons.my_location),
                            label: const Text('–ú–æ–µ –º–µ—Å—Ç–æ'),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥—Ä–µ—Å–µ
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            color: Colors.white,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey[300]!),
                    borderRadius: BorderRadius.circular(8),
                    color: Colors.grey[50],
                  ),
                  child: _isLoading 
                    ? const Row(
                        children: [
                          SizedBox(
                            width: 16,
                            height: 16,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          ),
                          SizedBox(width: 12),
                          Text('–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞...'),
                        ],
                      )
                    : Text(
                        _selectedAddress.isNotEmpty ? _selectedAddress : '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞',
                        style: Theme.of(context).textTheme.bodyMedium,
                      ),
                ),
                
                if (_distance > 0) ...[
                  const SizedBox(height: 12),
                  Row(
                    children: [
                      Icon(
                        _isDeliveryAvailable ? Icons.check_circle : Icons.cancel,
                        color: _isDeliveryAvailable ? Colors.green : Colors.red,
                        size: 20,
                      ),
                      const SizedBox(width: 8),
                      Text(
                        '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${(_distance).toStringAsFixed(1)} –∫–º',
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                          color: _isDeliveryAvailable ? Colors.green : Colors.red,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 4),
                  Text(
                    _isDeliveryAvailable 
                      ? '‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞'
                      : '‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ (–±–æ–ª–µ–µ 15 –∫–º)',
                    style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: _isDeliveryAvailable ? Colors.green : Colors.red,
                    ),
                  ),
                ],
              ],
            ),
          ),
          
          // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            child: ElevatedButton(
              onPressed: _isDeliveryAvailable && _selectedAddress.isNotEmpty ? () {
                widget.onLocationSelected(_selectedLocation, _selectedAddress);
                Navigator.of(context).pop();
              } : null,
              style: ElevatedButton.styleFrom(
                backgroundColor: _isDeliveryAvailable ? Colors.blue : Colors.grey,
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              child: Text(
                _isDeliveryAvailable 
                  ? '–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å' 
                  : '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–¥—Ä–µ—Å',
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: Colors.white,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

